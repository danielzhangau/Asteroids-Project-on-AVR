
CSSE2010Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001f6c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  00800134  00800134  00002034  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a1  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e2  00000000  00000000  000059c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c9a  00000000  00000000  00006da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  00008a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f48  00000000  00000000  000093f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023bd  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_20>
      54:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	48 65       	ori	r20, 0x58	; 88
      7e:	61 6c       	ori	r22, 0xC1	; 193
      80:	74 68       	ori	r23, 0x84	; 132
      82:	20 42       	sbci	r18, 0x20	; 32
      84:	61 72       	andi	r22, 0x21	; 33
      86:	3a 20       	and	r3, r10
      88:	25 38       	cpi	r18, 0x85	; 133
      8a:	64 00       	.word	0x0064	; ????

0000008c <__c.2288>:
      8c:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9c:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000aa <__c.2286>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2261>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      c4:	6f 6a 65 63 74 20 62 79 20 42 6f 73 68 65 6e 67     oject by Bosheng
      d4:	20 5a 68 61 6e 67 20 34 35 30 30 34 38 33 30 00      Zhang 45004830.

000000e4 <__c.2259>:
      e4:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

000000ee <__c.2042>:
      ee:	53 63 6f 72 65 73 3a 20 25 38 64 00                 Scores: %8d.

000000fa <numbers>:
      fa:	65 01 62 01 5e 01 5a 01 56 01 52 01 4e 01 4a 01     e.b.^.Z.V.R.N.J.
     10a:	46 01 42 01                                         F.B.

0000010e <letters>:
     10e:	d4 01 d0 01 cc 01 c8 01 c4 01 c0 01 bc 01 b8 01     ................
     11e:	b5 01 b1 01 ad 01 a9 01 a4 01 a0 01 9c 01 98 01     ................
     12e:	93 01 8f 01 8b 01 86 01 82 01 7d 01 78 01 73 01     ..........}.x.s.
     13e:	6e 01 69 01                                         n.i.

00000142 <cols_9>:
     142:	64 92 92 7d                                         d..}

00000146 <cols_8>:
     146:	6c 92 92 6d                                         l..m

0000014a <cols_7>:
     14a:	80 9e a0 c1                                         ....

0000014e <cols_6>:
     14e:	7c 92 92 4d                                         |..M

00000152 <cols_5>:
     152:	e4 a2 a2 9d                                         ....

00000156 <cols_4>:
     156:	18 28 48 ff                                         .(H.

0000015a <cols_3>:
     15a:	44 92 92 6d                                         D..m

0000015e <cols_2>:
     15e:	46 8a 92 63                                         F..c

00000162 <cols_1>:
     162:	42 fe 03                                            B..

00000165 <cols_0>:
     165:	7c 92 a2 7d                                         |..}

00000169 <cols_Z>:
     169:	86 8a 92 a2 c3                                      .....

0000016e <cols_Y>:
     16e:	e0 10 0e 10 e1                                      .....

00000173 <cols_X>:
     173:	c6 28 10 28 c7                                      .(.(.

00000178 <cols_W>:
     178:	fc 02 1c 02 fd                                      .....

0000017d <cols_V>:
     17d:	f8 04 02 04 f9                                      .....

00000182 <cols_U>:
     182:	fc 02 02 fd                                         ....

00000186 <cols_T>:
     186:	80 80 fe 80 81                                      .....

0000018b <cols_S>:
     18b:	64 92 92 4d                                         d..M

0000018f <cols_R>:
     18f:	fe 90 98 67                                         ...g

00000193 <cols_Q>:
     193:	7c 82 8a 7c 03                                      |..|.

00000198 <cols_P>:
     198:	fe 90 90 61                                         ...a

0000019c <cols_O>:
     19c:	7c 82 82 7d                                         |..}

000001a0 <cols_N>:
     1a0:	fe 20 10 ff                                         . ..

000001a4 <cols_M>:
     1a4:	fe 40 30 40 ff                                      .@0@.

000001a9 <cols_L>:
     1a9:	fe 02 02 03                                         ....

000001ad <cols_K>:
     1ad:	fe 10 28 c7                                         ..(.

000001b1 <cols_J>:
     1b1:	04 02 02 fd                                         ....

000001b5 <cols_I>:
     1b5:	82 fe 83                                            ...

000001b8 <cols_H>:
     1b8:	fe 10 10 ff                                         ....

000001bc <cols_G>:
     1bc:	7c 82 92 5d                                         |..]

000001c0 <cols_F>:
     1c0:	fe 90 90 81                                         ....

000001c4 <cols_E>:
     1c4:	fe 92 92 83                                         ....

000001c8 <cols_D>:
     1c8:	fe 82 82 7d                                         ...}

000001cc <cols_C>:
     1cc:	7c 82 82 45                                         |..E

000001d0 <cols_B>:
     1d0:	fe 92 92 6d                                         ...m

000001d4 <cols_A>:
     1d4:	7e 90 90 7f                                         ~...

000001d8 <__c.2040>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2025>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	ec e6       	ldi	r30, 0x6C	; 108
     1fa:	ff e1       	ldi	r31, 0x1F	; 31
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a4 33       	cpi	r26, 0x34	; 52
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	a4 e3       	ldi	r26, 0x34	; 52
     20c:	b1 e0       	ldi	r27, 0x01	; 1
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a3 38       	cpi	r26, 0x83	; 131
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 9a 07 	call	0xf34	; 0xf34 <main>
     21c:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
     23e:	08 95       	ret

00000240 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     240:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     244:	18 16       	cp	r1, r24
     246:	3c f5       	brge	.+78     	; 0x296 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     248:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     24c:	6f b7       	in	r22, 0x3f	; 63
		cli();
     24e:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     250:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
     254:	92 30       	cpi	r25, 0x02	; 2
     256:	b4 f0       	brlt	.+44     	; 0x284 <button_pushed+0x44>
     258:	21 e0       	ldi	r18, 0x01	; 1
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     25e:	f9 01       	movw	r30, r18
     260:	eb 5c       	subi	r30, 0xCB	; 203
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	40 81       	ld	r20, Z
     266:	f9 01       	movw	r30, r18
     268:	ec 5c       	subi	r30, 0xCC	; 204
     26a:	fe 4f       	sbci	r31, 0xFE	; 254
     26c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     26e:	9f 5f       	subi	r25, 0xFF	; 255
     270:	29 2f       	mov	r18, r25
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <__data_end>
     278:	04 2e       	mov	r0, r20
     27a:	00 0c       	add	r0, r0
     27c:	55 0b       	sbc	r21, r21
     27e:	24 17       	cp	r18, r20
     280:	35 07       	cpc	r19, r21
     282:	6c f3       	brlt	.-38     	; 0x25e <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     284:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
     288:	91 50       	subi	r25, 0x01	; 1
     28a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__data_end>
		
		if(interrupts_were_enabled) {
     28e:	66 23       	and	r22, r22
     290:	1c f4       	brge	.+6      	; 0x298 <button_pushed+0x58>
			// Turn them back on again
			sei();
     292:	78 94       	sei
     294:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     296:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     298:	08 95       	ret

0000029a <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	ef 93       	push	r30
     2b6:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2b8:	43 b1       	in	r20, 0x03	; 3
     2ba:	4f 70       	andi	r20, 0x0F	; 15
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2c0:	64 2f       	mov	r22, r20
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     2c8:	24 30       	cpi	r18, 0x04	; 4
     2ca:	04 f5       	brge	.+64     	; 0x30c <__vector_5+0x72>
     2cc:	9b 01       	movw	r18, r22
     2ce:	08 2e       	mov	r0, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_5+0x3c>
     2d2:	35 95       	asr	r19
     2d4:	27 95       	ror	r18
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <__vector_5+0x38>
     2da:	20 ff       	sbrs	r18, 0
     2dc:	17 c0       	rjmp	.+46     	; 0x30c <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     2de:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	08 2e       	mov	r0, r24
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_5+0x52>
     2e8:	35 95       	asr	r19
     2ea:	27 95       	ror	r18
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <__vector_5+0x4e>
     2f0:	20 fd       	sbrc	r18, 0
     2f2:	0c c0       	rjmp	.+24     	; 0x30c <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     2f4:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <__data_end>
     2f8:	21 e0       	ldi	r18, 0x01	; 1
     2fa:	2e 0f       	add	r18, r30
     2fc:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__data_end>
     300:	0e 2e       	mov	r0, r30
     302:	00 0c       	add	r0, r0
     304:	ff 0b       	sbc	r31, r31
     306:	eb 5c       	subi	r30, 0xCB	; 203
     308:	fe 4f       	sbci	r31, 0xFE	; 254
     30a:	80 83       	st	Z, r24
     30c:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	91 05       	cpc	r25, r1
     312:	c1 f6       	brne	.-80     	; 0x2c4 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     314:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <last_button_state>
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	7f 91       	pop	r23
     322:	6f 91       	pop	r22
     324:	5f 91       	pop	r21
     326:	4f 91       	pop	r20
     328:	3f 91       	pop	r19
     32a:	2f 91       	pop	r18
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <asteroid_at>:
int get_health() {
	return health;
}
	
void setHealth(int newHealth) {
	health = newHealth;
     336:	20 e1       	ldi	r18, 0x10	; 16
     338:	82 9f       	mul	r24, r18
     33a:	c0 01       	movw	r24, r0
     33c:	11 24       	eor	r1, r1
     33e:	6f 70       	andi	r22, 0x0F	; 15
     340:	86 2b       	or	r24, r22
     342:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <numAsteroids>
     346:	04 2e       	mov	r0, r20
     348:	00 0c       	add	r0, r0
     34a:	55 0b       	sbc	r21, r21
     34c:	14 16       	cp	r1, r20
     34e:	15 06       	cpc	r1, r21
     350:	c4 f4       	brge	.+48     	; 0x382 <asteroid_at+0x4c>
     352:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <asteroids>
     356:	89 17       	cp	r24, r25
     358:	49 f0       	breq	.+18     	; 0x36c <asteroid_at+0x36>
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0a c0       	rjmp	.+20     	; 0x372 <asteroid_at+0x3c>
     35e:	f9 01       	movw	r30, r18
     360:	e0 5b       	subi	r30, 0xB0	; 176
     362:	fe 4f       	sbci	r31, 0xFE	; 254
     364:	20 81       	ld	r18, Z
     366:	82 13       	cpse	r24, r18
     368:	04 c0       	rjmp	.+8      	; 0x372 <asteroid_at+0x3c>
     36a:	01 c0       	rjmp	.+2      	; 0x36e <asteroid_at+0x38>
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	89 2f       	mov	r24, r25
     370:	08 95       	ret
     372:	9f 5f       	subi	r25, 0xFF	; 255
     374:	29 2f       	mov	r18, r25
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	24 17       	cp	r18, r20
     37a:	35 07       	cpc	r19, r21
     37c:	84 f3       	brlt	.-32     	; 0x35e <asteroid_at+0x28>
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	08 95       	ret
     382:	8f ef       	ldi	r24, 0xFF	; 255
     384:	08 95       	ret

00000386 <projectile_at>:
     386:	20 e1       	ldi	r18, 0x10	; 16
     388:	82 9f       	mul	r24, r18
     38a:	c0 01       	movw	r24, r0
     38c:	11 24       	eor	r1, r1
     38e:	6f 70       	andi	r22, 0x0F	; 15
     390:	86 2b       	or	r24, r22
     392:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <numProjectiles>
     396:	04 2e       	mov	r0, r20
     398:	00 0c       	add	r0, r0
     39a:	55 0b       	sbc	r21, r21
     39c:	14 16       	cp	r1, r20
     39e:	15 06       	cpc	r1, r21
     3a0:	c4 f4       	brge	.+48     	; 0x3d2 <projectile_at+0x4c>
     3a2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <projectiles>
     3a6:	89 17       	cp	r24, r25
     3a8:	49 f0       	breq	.+18     	; 0x3bc <projectile_at+0x36>
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <projectile_at+0x3c>
     3ae:	f9 01       	movw	r30, r18
     3b0:	e5 5b       	subi	r30, 0xB5	; 181
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	20 81       	ld	r18, Z
     3b6:	82 13       	cpse	r24, r18
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <projectile_at+0x3c>
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <projectile_at+0x38>
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	89 2f       	mov	r24, r25
     3c0:	08 95       	ret
     3c2:	9f 5f       	subi	r25, 0xFF	; 255
     3c4:	29 2f       	mov	r18, r25
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	24 17       	cp	r18, r20
     3ca:	35 07       	cpc	r19, r21
     3cc:	84 f3       	brlt	.-32     	; 0x3ae <projectile_at+0x28>
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	08 95       	ret
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	08 95       	ret

000003d6 <redraw_base>:
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	18 2f       	mov	r17, r24
     3de:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <basePosition>
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	89 0f       	add	r24, r25
     3e6:	48 2f       	mov	r20, r24
     3e8:	08 2e       	mov	r0, r24
     3ea:	00 0c       	add	r0, r0
     3ec:	55 0b       	sbc	r21, r21
     3ee:	29 2f       	mov	r18, r25
     3f0:	09 2e       	mov	r0, r25
     3f2:	00 0c       	add	r0, r0
     3f4:	33 0b       	sbc	r19, r19
     3f6:	2f 5f       	subi	r18, 0xFF	; 255
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	24 17       	cp	r18, r20
     3fc:	35 07       	cpc	r19, r21
     3fe:	e4 f0       	brlt	.+56     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     400:	d8 e0       	ldi	r29, 0x08	; 8
     402:	d9 1b       	sub	r29, r25
     404:	c8 2f       	mov	r28, r24
     406:	88 30       	cpi	r24, 0x08	; 8
     408:	28 f4       	brcc	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40a:	41 2f       	mov	r20, r17
     40c:	6d 2f       	mov	r22, r29
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	8c 0f       	add	r24, r28
     418:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <basePosition>
     41c:	d1 50       	subi	r29, 0x01	; 1
     41e:	48 2f       	mov	r20, r24
     420:	08 2e       	mov	r0, r24
     422:	00 0c       	add	r0, r0
     424:	55 0b       	sbc	r21, r21
     426:	29 2f       	mov	r18, r25
     428:	09 2e       	mov	r0, r25
     42a:	00 0c       	add	r0, r0
     42c:	33 0b       	sbc	r19, r19
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	24 17       	cp	r18, r20
     434:	35 07       	cpc	r19, r21
     436:	34 f7       	brge	.-52     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     438:	67 e0       	ldi	r22, 0x07	; 7
     43a:	69 1b       	sub	r22, r25
     43c:	41 2f       	mov	r20, r17
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	08 95       	ret

0000044c <redraw_asteroid>:
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <numAsteroids>
     452:	02 2e       	mov	r0, r18
     454:	00 0c       	add	r0, r0
     456:	33 0b       	sbc	r19, r19
     458:	82 17       	cp	r24, r18
     45a:	93 07       	cpc	r25, r19
     45c:	6c f4       	brge	.+26     	; 0x478 <redraw_asteroid+0x2c>
     45e:	46 2f       	mov	r20, r22
     460:	fc 01       	movw	r30, r24
     462:	e0 5b       	subi	r30, 0xB0	; 176
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	80 81       	ld	r24, Z
     468:	98 2f       	mov	r25, r24
     46a:	92 95       	swap	r25
     46c:	9f 70       	andi	r25, 0x0F	; 15
     46e:	67 e0       	ldi	r22, 0x07	; 7
     470:	69 1b       	sub	r22, r25
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     478:	08 95       	ret

0000047a <redraw_projectile>:
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <numProjectiles>
     480:	02 2e       	mov	r0, r18
     482:	00 0c       	add	r0, r0
     484:	33 0b       	sbc	r19, r19
     486:	82 17       	cp	r24, r18
     488:	93 07       	cpc	r25, r19
     48a:	6c f4       	brge	.+26     	; 0x4a6 <redraw_projectile+0x2c>
     48c:	46 2f       	mov	r20, r22
     48e:	fc 01       	movw	r30, r24
     490:	e5 5b       	subi	r30, 0xB5	; 181
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	80 81       	ld	r24, Z
     496:	98 2f       	mov	r25, r24
     498:	92 95       	swap	r25
     49a:	9f 70       	andi	r25, 0x0F	; 15
     49c:	67 e0       	ldi	r22, 0x07	; 7
     49e:	69 1b       	sub	r22, r25
     4a0:	8f 70       	andi	r24, 0x0F	; 15
     4a2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     4a6:	08 95       	ret

000004a8 <redraw_whole_display>:
     4a8:	cf 93       	push	r28
     4aa:	0e 94 d1 05 	call	0xba2	; 0xba2 <ledmatrix_clear>
     4ae:	8f ed       	ldi	r24, 0xDF	; 223
     4b0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <redraw_base>
     4b4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <numAsteroids>
     4b8:	18 16       	cp	r1, r24
     4ba:	84 f4       	brge	.+32     	; 0x4dc <redraw_whole_display+0x34>
     4bc:	c0 e0       	ldi	r28, 0x00	; 0
     4be:	60 ef       	ldi	r22, 0xF0	; 240
     4c0:	8c 2f       	mov	r24, r28
     4c2:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
     4c6:	cf 5f       	subi	r28, 0xFF	; 255
     4c8:	2c 2f       	mov	r18, r28
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <numAsteroids>
     4d0:	08 2e       	mov	r0, r24
     4d2:	00 0c       	add	r0, r0
     4d4:	99 0b       	sbc	r25, r25
     4d6:	28 17       	cp	r18, r24
     4d8:	39 07       	cpc	r19, r25
     4da:	8c f3       	brlt	.-30     	; 0x4be <redraw_whole_display+0x16>
     4dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <numProjectiles>
     4e0:	18 16       	cp	r1, r24
     4e2:	84 f4       	brge	.+32     	; 0x504 <redraw_whole_display+0x5c>
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	6f e0       	ldi	r22, 0x0F	; 15
     4e8:	8c 2f       	mov	r24, r28
     4ea:	0e 94 3d 02 	call	0x47a	; 0x47a <redraw_projectile>
     4ee:	cf 5f       	subi	r28, 0xFF	; 255
     4f0:	2c 2f       	mov	r18, r28
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <numProjectiles>
     4f8:	08 2e       	mov	r0, r24
     4fa:	00 0c       	add	r0, r0
     4fc:	99 0b       	sbc	r25, r25
     4fe:	28 17       	cp	r18, r24
     500:	39 07       	cpc	r19, r25
     502:	8c f3       	brlt	.-30     	; 0x4e6 <redraw_whole_display+0x3e>
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <remove_projectile>:
     508:	cf 93       	push	r28
     50a:	88 23       	and	r24, r24
     50c:	24 f1       	brlt	.+72     	; 0x556 <remove_projectile+0x4e>
     50e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <numProjectiles>
     512:	89 17       	cp	r24, r25
     514:	04 f5       	brge	.+64     	; 0x556 <remove_projectile+0x4e>
     516:	c8 2f       	mov	r28, r24
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	0e 94 3d 02 	call	0x47a	; 0x47a <redraw_projectile>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	8c 0f       	add	r24, r28
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <numProjectiles>
     52a:	46 2f       	mov	r20, r22
     52c:	06 2e       	mov	r0, r22
     52e:	00 0c       	add	r0, r0
     530:	55 0b       	sbc	r21, r21
     532:	24 17       	cp	r18, r20
     534:	35 07       	cpc	r19, r21
     536:	64 f4       	brge	.+24     	; 0x550 <remove_projectile+0x48>
     538:	f9 01       	movw	r30, r18
     53a:	e5 5b       	subi	r30, 0xB5	; 181
     53c:	fe 4f       	sbci	r31, 0xFE	; 254
     53e:	90 81       	ld	r25, Z
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	90 83       	st	Z, r25
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	28 2f       	mov	r18, r24
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	24 17       	cp	r18, r20
     54c:	35 07       	cpc	r19, r21
     54e:	a4 f3       	brlt	.-24     	; 0x538 <remove_projectile+0x30>
     550:	61 50       	subi	r22, 0x01	; 1
     552:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <numProjectiles>
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <fire_projectile>:
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	c0 91 4f 01 	lds	r28, 0x014F	; 0x80014f <numProjectiles>
     562:	c4 30       	cpi	r28, 0x04	; 4
     564:	e4 f4       	brge	.+56     	; 0x59e <fire_projectile+0x44>
     566:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <basePosition>
     56a:	62 e0       	ldi	r22, 0x02	; 2
     56c:	8d 2f       	mov	r24, r29
     56e:	0e 94 c3 01 	call	0x386	; 0x386 <projectile_at>
     572:	8f 3f       	cpi	r24, 0xFF	; 255
     574:	b1 f4       	brne	.+44     	; 0x5a2 <fire_projectile+0x48>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	8c 0f       	add	r24, r28
     57a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <numProjectiles>
     57e:	ec 2f       	mov	r30, r28
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	e5 5b       	subi	r30, 0xB5	; 181
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	20 e1       	ldi	r18, 0x10	; 16
     588:	d2 02       	muls	r29, r18
     58a:	c0 01       	movw	r24, r0
     58c:	11 24       	eor	r1, r1
     58e:	82 60       	ori	r24, 0x02	; 2
     590:	80 83       	st	Z, r24
     592:	6f e0       	ldi	r22, 0x0F	; 15
     594:	8c 2f       	mov	r24, r28
     596:	0e 94 3d 02 	call	0x47a	; 0x47a <redraw_projectile>
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <fire_projectile+0x4a>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <fire_projectile+0x4a>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <advance_projectiles>:
     5aa:	af 92       	push	r10
     5ac:	bf 92       	push	r11
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	68 94       	set
     5c0:	ee 24       	eor	r14, r14
     5c2:	e3 f8       	bld	r14, 3
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f7 e0       	ldi	r31, 0x07	; 7
     5c8:	ff 2e       	mov	r15, r31
     5ca:	f0 2d       	mov	r31, r0
     5cc:	06 e0       	ldi	r16, 0x06	; 6
     5ce:	8c c0       	rjmp	.+280    	; 0x6e8 <advance_projectiles+0x13e>
     5d0:	a1 2e       	mov	r10, r17
     5d2:	01 2e       	mov	r0, r17
     5d4:	00 0c       	add	r0, r0
     5d6:	bb 08       	sbc	r11, r11
     5d8:	f5 01       	movw	r30, r10
     5da:	e5 5b       	subi	r30, 0xB5	; 181
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 81       	ld	r24, Z
     5e0:	c8 2f       	mov	r28, r24
     5e2:	cf 70       	andi	r28, 0x0F	; 15
     5e4:	dd 24       	eor	r13, r13
     5e6:	d3 94       	inc	r13
     5e8:	dc 0e       	add	r13, r28
     5ea:	20 e1       	ldi	r18, 0x10	; 16
     5ec:	d2 12       	cpse	r13, r18
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <advance_projectiles+0x4e>
     5f0:	81 2f       	mov	r24, r17
     5f2:	0e 94 84 02 	call	0x508	; 0x508 <remove_projectile>
     5f6:	78 c0       	rjmp	.+240    	; 0x6e8 <advance_projectiles+0x13e>
     5f8:	d8 2f       	mov	r29, r24
     5fa:	d2 95       	swap	r29
     5fc:	df 70       	andi	r29, 0x0F	; 15
     5fe:	6d 2d       	mov	r22, r13
     600:	8d 2f       	mov	r24, r29
     602:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     606:	8f 3f       	cpi	r24, 0xFF	; 255
     608:	09 f4       	brne	.+2      	; 0x60c <advance_projectiles+0x62>
     60a:	5a c0       	rjmp	.+180    	; 0x6c0 <advance_projectiles+0x116>
     60c:	43 e1       	ldi	r20, 0x13	; 19
     60e:	6e 2d       	mov	r22, r14
     610:	6d 1b       	sub	r22, r29
     612:	8d 2d       	mov	r24, r13
     614:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     618:	43 e1       	ldi	r20, 0x13	; 19
     61a:	bf 2c       	mov	r11, r15
     61c:	bd 1a       	sub	r11, r29
     61e:	6b 2d       	mov	r22, r11
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	8c 0f       	add	r24, r28
     624:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     628:	43 e1       	ldi	r20, 0x13	; 19
     62a:	6b 2d       	mov	r22, r11
     62c:	8c 2f       	mov	r24, r28
     62e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     632:	43 e1       	ldi	r20, 0x13	; 19
     634:	60 2f       	mov	r22, r16
     636:	6d 1b       	sub	r22, r29
     638:	8d 2d       	mov	r24, r13
     63a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
     63e:	6d 2d       	mov	r22, r13
     640:	8d 2f       	mov	r24, r29
     642:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
     64c:	81 2f       	mov	r24, r17
     64e:	0e 94 84 02 	call	0x508	; 0x508 <remove_projectile>
     652:	0e 94 0f 0c 	call	0x181e	; 0x181e <random>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	87 70       	andi	r24, 0x07	; 7
     65c:	99 27       	eor	r25, r25
     65e:	aa 27       	eor	r26, r26
     660:	b0 78       	andi	r27, 0x80	; 128
     662:	bb 23       	and	r27, r27
     664:	54 f4       	brge	.+20     	; 0x67a <advance_projectiles+0xd0>
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	a1 09       	sbc	r26, r1
     66a:	b1 09       	sbc	r27, r1
     66c:	88 6f       	ori	r24, 0xF8	; 248
     66e:	9f 6f       	ori	r25, 0xFF	; 255
     670:	af 6f       	ori	r26, 0xFF	; 255
     672:	bf 6f       	ori	r27, 0xFF	; 255
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	a1 1d       	adc	r26, r1
     678:	b1 1d       	adc	r27, r1
     67a:	c8 2f       	mov	r28, r24
     67c:	6f e0       	ldi	r22, 0x0F	; 15
     67e:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     682:	8f 3f       	cpi	r24, 0xFF	; 255
     684:	31 f7       	brne	.-52     	; 0x652 <advance_projectiles+0xa8>
     686:	6d 2d       	mov	r22, r13
     688:	8d 2f       	mov	r24, r29
     68a:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     68e:	e8 2f       	mov	r30, r24
     690:	88 0f       	add	r24, r24
     692:	ff 0b       	sbc	r31, r31
     694:	e0 5b       	subi	r30, 0xB0	; 176
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	20 e1       	ldi	r18, 0x10	; 16
     69a:	c2 9f       	mul	r28, r18
     69c:	c0 01       	movw	r24, r0
     69e:	11 24       	eor	r1, r1
     6a0:	8f 60       	ori	r24, 0x0F	; 15
     6a2:	80 83       	st	Z, r24
     6a4:	6f e0       	ldi	r22, 0x0F	; 15
     6a6:	8c 2f       	mov	r24, r28
     6a8:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     6ac:	60 ef       	ldi	r22, 0xF0	; 240
     6ae:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <add_to_score>
     6ba:	0e 94 de 07 	call	0xfbc	; 0xfbc <display_score>
     6be:	14 c0       	rjmp	.+40     	; 0x6e8 <advance_projectiles+0x13e>
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	81 2f       	mov	r24, r17
     6c4:	0e 94 3d 02 	call	0x47a	; 0x47a <redraw_projectile>
     6c8:	f5 01       	movw	r30, r10
     6ca:	e5 5b       	subi	r30, 0xB5	; 181
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	20 e1       	ldi	r18, 0x10	; 16
     6d0:	d2 9f       	mul	r29, r18
     6d2:	c0 01       	movw	r24, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	6d 2d       	mov	r22, r13
     6d8:	6f 70       	andi	r22, 0x0F	; 15
     6da:	68 2b       	or	r22, r24
     6dc:	60 83       	st	Z, r22
     6de:	6f e0       	ldi	r22, 0x0F	; 15
     6e0:	81 2f       	mov	r24, r17
     6e2:	0e 94 3d 02 	call	0x47a	; 0x47a <redraw_projectile>
     6e6:	1f 5f       	subi	r17, 0xFF	; 255
     6e8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <numProjectiles>
     6ec:	18 17       	cp	r17, r24
     6ee:	0c f4       	brge	.+2      	; 0x6f2 <advance_projectiles+0x148>
     6f0:	6f cf       	rjmp	.-290    	; 0x5d0 <advance_projectiles+0x26>
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	08 95       	ret

00000706 <asteroidAcceleration>:
     706:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_score>
     70a:	46 e9       	ldi	r20, 0x96	; 150
     70c:	46 9f       	mul	r20, r22
     70e:	90 01       	movw	r18, r0
     710:	47 9f       	mul	r20, r23
     712:	30 0d       	add	r19, r0
     714:	11 24       	eor	r1, r1
     716:	88 e8       	ldi	r24, 0x88	; 136
     718:	93 e1       	ldi	r25, 0x13	; 19
     71a:	82 1b       	sub	r24, r18
     71c:	93 0b       	sbc	r25, r19
     71e:	84 3f       	cpi	r24, 0xF4	; 244
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	92 07       	cpc	r25, r18
     724:	14 f4       	brge	.+4      	; 0x72a <asteroidAcceleration+0x24>
     726:	84 ef       	ldi	r24, 0xF4	; 244
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	08 95       	ret

0000072c <is_game_over>:
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <health>
     732:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <health+0x1>
     736:	12 16       	cp	r1, r18
     738:	13 06       	cpc	r1, r19
     73a:	0c f4       	brge	.+2      	; 0x73e <is_game_over+0x12>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	08 95       	ret

00000740 <display_health>:
}	

void display_health(int health) {
	DDRC |= 0x0F;
     740:	27 b1       	in	r18, 0x07	; 7
     742:	2f 60       	ori	r18, 0x0F	; 15
     744:	27 b9       	out	0x07, r18	; 7
	PORTC |= 0x0F;
     746:	28 b1       	in	r18, 0x08	; 8
     748:	2f 60       	ori	r18, 0x0F	; 15
     74a:	28 b9       	out	0x08, r18	; 8
	switch (health) {
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	91 05       	cpc	r25, r1
     750:	89 f0       	breq	.+34     	; 0x774 <display_health+0x34>
     752:	2c f4       	brge	.+10     	; 0x75e <display_health+0x1e>
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	49 f0       	breq	.+18     	; 0x76a <display_health+0x2a>
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	49 f0       	breq	.+18     	; 0x76e <display_health+0x2e>
     75c:	08 95       	ret
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	91 05       	cpc	r25, r1
     762:	59 f0       	breq	.+22     	; 0x77a <display_health+0x3a>
     764:	04 97       	sbiw	r24, 0x04	; 4
     766:	61 f0       	breq	.+24     	; 0x780 <display_health+0x40>
     768:	08 95       	ret
		case 0:
			PORTC = 0x00;
     76a:	18 b8       	out	0x08, r1	; 8
			break;
     76c:	08 95       	ret
		case 1:
			PORTC = (0 << PORTC0) | (0 << PORTC1) | (1 << PORTC2) | (0 << PORTC3);
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	88 b9       	out	0x08, r24	; 8
			break;
     772:	08 95       	ret
		case 2:
			PORTC = (0 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (0 << PORTC3);
     774:	86 e0       	ldi	r24, 0x06	; 6
     776:	88 b9       	out	0x08, r24	; 8
			break;
     778:	08 95       	ret
		case 3:
			PORTC = (0 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (1 << PORTC3);
     77a:	8e e0       	ldi	r24, 0x0E	; 14
     77c:	88 b9       	out	0x08, r24	; 8
			break;
     77e:	08 95       	ret
		case 4:
			PORTC = 0x0F;
     780:	8f e0       	ldi	r24, 0x0F	; 15
     782:	88 b9       	out	0x08, r24	; 8
     784:	08 95       	ret

00000786 <initialise_game>:
 
// Initialize game field:
// (1) base starts in the center (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     786:	4f 92       	push	r4
     788:	5f 92       	push	r5
     78a:	6f 92       	push	r6
     78c:	7f 92       	push	r7
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <basePosition>
	numProjectiles = 0;
     7a8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <numProjectiles>
	numAsteroids = 0;
     7ac:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <numAsteroids>
     7b0:	00 e5       	ldi	r16, 0x50	; 80
     7b2:	11 e0       	ldi	r17, 0x01	; 1
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f4 e6       	ldi	r31, 0x64	; 100
     7b8:	af 2e       	mov	r10, r31
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	bf 2e       	mov	r11, r31
     7be:	f0 2d       	mov	r31, r0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fd e0       	ldi	r31, 0x0D	; 13
     7c4:	4f 2e       	mov	r4, r31
     7c6:	51 2c       	mov	r5, r1
     7c8:	61 2c       	mov	r6, r1
     7ca:	71 2c       	mov	r7, r1
     7cc:	f0 2d       	mov	r31, r0
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     7ce:	0e 94 0f 0c 	call	0x181e	; 0x181e <random>
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
     7d6:	27 e0       	ldi	r18, 0x07	; 7
     7d8:	c2 22       	and	r12, r18
     7da:	dd 24       	eor	r13, r13
     7dc:	ee 24       	eor	r14, r14
     7de:	20 e8       	ldi	r18, 0x80	; 128
     7e0:	f2 22       	and	r15, r18
     7e2:	ff 20       	and	r15, r15
     7e4:	84 f4       	brge	.+32     	; 0x806 <initialise_game+0x80>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	c8 1a       	sub	r12, r24
     7ea:	d1 08       	sbc	r13, r1
     7ec:	e1 08       	sbc	r14, r1
     7ee:	f1 08       	sbc	r15, r1
     7f0:	e8 ef       	ldi	r30, 0xF8	; 248
     7f2:	ce 2a       	or	r12, r30
     7f4:	dd 24       	eor	r13, r13
     7f6:	da 94       	dec	r13
     7f8:	ed 2c       	mov	r14, r13
     7fa:	fe 2c       	mov	r15, r14
     7fc:	ff ef       	ldi	r31, 0xFF	; 255
     7fe:	cf 1a       	sub	r12, r31
     800:	df 0a       	sbc	r13, r31
     802:	ef 0a       	sbc	r14, r31
     804:	ff 0a       	sbc	r15, r31
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     806:	0e 94 0f 0c 	call	0x181e	; 0x181e <random>
     80a:	a3 01       	movw	r20, r6
     80c:	92 01       	movw	r18, r4
     80e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divmodsi4>
     812:	c3 e0       	ldi	r28, 0x03	; 3
     814:	c6 0f       	add	r28, r22
		} while(asteroid_at(x,y) != -1);
     816:	6c 2f       	mov	r22, r28
     818:	8c 2d       	mov	r24, r12
     81a:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     81e:	8f 3f       	cpi	r24, 0xFF	; 255
     820:	b1 f6       	brne	.-84     	; 0x7ce <initialise_game+0x48>
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     822:	20 e1       	ldi	r18, 0x10	; 16
     824:	c2 9e       	mul	r12, r18
     826:	b0 01       	movw	r22, r0
     828:	11 24       	eor	r1, r1
     82a:	cf 70       	andi	r28, 0x0F	; 15
     82c:	c6 2b       	or	r28, r22
     82e:	f8 01       	movw	r30, r16
     830:	c1 93       	st	Z+, r28
     832:	8f 01       	movw	r16, r30
		numAsteroids++;
     834:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <numAsteroids>
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <numAsteroids>
	
    basePosition = 3;
	numProjectiles = 0;
	numAsteroids = 0;

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     83e:	ea 15       	cp	r30, r10
     840:	fb 05       	cpc	r31, r11
     842:	29 f6       	brne	.-118    	; 0x7ce <initialise_game+0x48>
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
		numAsteroids++;
	}

	health = 4;
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <health+0x1>
     84c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <health>
	display_health(health);
     850:	0e 94 a0 03 	call	0x740	; 0x740 <display_health>
	redraw_whole_display();
     854:	0e 94 54 02 	call	0x4a8	; 0x4a8 <redraw_whole_display>

}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	7f 90       	pop	r7
     86e:	6f 90       	pop	r6
     870:	5f 90       	pop	r5
     872:	4f 90       	pop	r4
     874:	08 95       	ret

00000876 <display_health_bar>:
	}
	
}

void display_health_bar()	{
	move_cursor(10,12);
     876:	6c e0       	ldi	r22, 0x0C	; 12
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	8a e0       	ldi	r24, 0x0A	; 10
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <move_cursor>
	printf_P(PSTR("Health Bar: %8d"), get_health());
     882:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <health+0x1>
     886:	8f 93       	push	r24
     888:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <health>
     88c:	8f 93       	push	r24
     88e:	8c e7       	ldi	r24, 0x7C	; 124
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
};
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	08 95       	ret

000008a4 <baseHitDetection>:
	}
	return speedUp;
}


void baseHitDetection() {
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
	int8_t asteroidNumber, newX, newY;
	if ((asteroidNumber = asteroid_at(basePosition, 0)) != -1 || 
     8aa:	c0 91 64 01 	lds	r28, 0x0164	; 0x800164 <basePosition>
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	8c 2f       	mov	r24, r28
     8b2:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     8b6:	d8 2f       	mov	r29, r24
     8b8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ba:	b9 f4       	brne	.+46     	; 0x8ea <baseHitDetection+0x46>
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	8c 0f       	add	r24, r28
     8c2:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     8c6:	d8 2f       	mov	r29, r24
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	79 f4       	brne	.+30     	; 0x8ea <baseHitDetection+0x46>
			(asteroidNumber = asteroid_at(basePosition -1, 0)) != -1 || 
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	8c 0f       	add	r24, r28
     8d2:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     8d6:	d8 2f       	mov	r29, r24
     8d8:	8f 3f       	cpi	r24, 0xFF	; 255
     8da:	39 f4       	brne	.+14     	; 0x8ea <baseHitDetection+0x46>
			(asteroidNumber = asteroid_at(basePosition +1, 0)) != -1 ||
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	8c 2f       	mov	r24, r28
     8e0:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     8e4:	d8 2f       	mov	r29, r24
     8e6:	8f 3f       	cpi	r24, 0xFF	; 255
     8e8:	d1 f1       	breq	.+116    	; 0x95e <__stack+0x5f>
			(asteroidNumber = asteroid_at(basePosition, 1)) != -1) {
		//remove_asteroid(asteroidNumber);
		redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     8ea:	1d 2f       	mov	r17, r29
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	8d 2f       	mov	r24, r29
     8f0:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
		// Find position that isn't occupied
		do {
			newX = (uint8_t)(rand() % FIELD_WIDTH);
     8f4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <rand>
     8f8:	87 70       	andi	r24, 0x07	; 7
     8fa:	90 78       	andi	r25, 0x80	; 128
     8fc:	99 23       	and	r25, r25
     8fe:	24 f4       	brge	.+8      	; 0x908 <__stack+0x9>
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	88 6f       	ori	r24, 0xF8	; 248
     904:	9f 6f       	ori	r25, 0xFF	; 255
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	c8 2f       	mov	r28, r24
			//newY = (uint8_t)(3 + (rand() % (FIELD_HEIGHT-3)));
			newY = FIELD_HEIGHT-1;
			
		} while (asteroid_at(newX, newY) != -1);
     90a:	6f e0       	ldi	r22, 0x0F	; 15
     90c:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     910:	8f 3f       	cpi	r24, 0xFF	; 255
     912:	81 f7       	brne	.-32     	; 0x8f4 <baseHitDetection+0x50>
		
		
		// Update the asteroid's position
		asteroids[asteroidNumber] = GAME_POSITION(newX,newY);
     914:	ed 2f       	mov	r30, r29
     916:	dd 0f       	add	r29, r29
     918:	ff 0b       	sbc	r31, r31
     91a:	e0 5b       	subi	r30, 0xB0	; 176
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	80 e1       	ldi	r24, 0x10	; 16
     920:	c8 02       	muls	r28, r24
     922:	90 01       	movw	r18, r0
     924:	11 24       	eor	r1, r1
     926:	2f 60       	ori	r18, 0x0F	; 15
     928:	20 83       	st	Z, r18
		
		// Redraw the asteroid
		redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     92a:	60 ef       	ldi	r22, 0xF0	; 240
     92c:	81 2f       	mov	r24, r17
     92e:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
		//createAsteroid(newX, newY);
		//numAsteroids++;
		asteroidNumber++;
		
		add_to_score(-1);
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	9f ef       	ldi	r25, 0xFF	; 255
     936:	0e 94 ae 07 	call	0xf5c	; 0xf5c <add_to_score>
		display_score();
     93a:	0e 94 de 07 	call	0xfbc	; 0xfbc <display_score>
		
		health -= 1;
     93e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <health>
     942:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <health+0x1>
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <health+0x1>
     94c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <health>
		display_health(health);
     950:	0e 94 a0 03 	call	0x740	; 0x740 <display_health>
		display_health_bar();
     954:	0e 94 3b 04 	call	0x876	; 0x876 <display_health_bar>
		redraw_base(COLOUR_BASE);
     958:	8f ed       	ldi	r24, 0xDF	; 223
     95a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <redraw_base>
	}
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	08 95       	ret

00000966 <move_base>:
// The direction argument has the value MOVE_LEFT or
// MOVE_RIGHT. The move succeeds if the base isn't all 
// the way to one side, e.g., not permitted to move
// left if basePosition is already 0.
// Returns 1 if move successful, 0 otherwise.
int8_t move_base(int8_t direction) {	
     966:	cf 93       	push	r28
     968:	c8 2f       	mov	r28, r24
	// same value.
	
	// YOUR CODE HERE (AND BELOW) - FIX THIS FUNCTION
	
	// We erase the base from its current position first
	redraw_base(COLOUR_BLACK);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <redraw_base>
	
	// Move the base (only to the left at present)
	if(direction == MOVE_LEFT && basePosition > 0) { 
     970:	c1 11       	cpse	r28, r1
     972:	0a c0       	rjmp	.+20     	; 0x988 <move_base+0x22>
     974:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <basePosition>
     978:	18 16       	cp	r1, r24
     97a:	8c f4       	brge	.+34     	; 0x99e <move_base+0x38>
		basePosition--;
     97c:	81 50       	subi	r24, 0x01	; 1
     97e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <basePosition>
		baseHitDetection();
     982:	0e 94 52 04 	call	0x8a4	; 0x8a4 <baseHitDetection>
     986:	0b c0       	rjmp	.+22     	; 0x99e <move_base+0x38>
	} 
	else if(direction == MOVE_RIGHT && basePosition < 7){
     988:	c1 30       	cpi	r28, 0x01	; 1
     98a:	49 f4       	brne	.+18     	; 0x99e <move_base+0x38>
     98c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <basePosition>
     990:	87 30       	cpi	r24, 0x07	; 7
     992:	2c f4       	brge	.+10     	; 0x99e <move_base+0x38>
		basePosition++;
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <basePosition>
		baseHitDetection();
     99a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <baseHitDetection>
	}

	// Redraw the base
	redraw_base(COLOUR_BASE);
     99e:	8f ed       	ldi	r24, 0xDF	; 223
     9a0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <redraw_base>
	
	return 1;
}
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <advance_asteroids>:
			}
		}			
	}
}

void advance_asteroids(void) {
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
	int8_t x,y;
	uint8_t newX,newY;
	int8_t asteroidNumber;
	
	redraw_whole_display();
     9b8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <redraw_whole_display>
	asteroidNumber = 0;
	while(asteroidNumber < numAsteroids) {
     9bc:	00 e0       	ldi	r16, 0x00	; 0
     9be:	9b c0       	rjmp	.+310    	; 0xaf6 <advance_asteroids+0x14c>
		// Get the current position of the asteroid
		x = GET_X_POSITION(asteroids[asteroidNumber]);
     9c0:	c0 2f       	mov	r28, r16
     9c2:	00 2e       	mov	r0, r16
     9c4:	00 0c       	add	r0, r0
     9c6:	dd 0b       	sbc	r29, r29
     9c8:	fe 01       	movw	r30, r28
     9ca:	e0 5b       	subi	r30, 0xB0	; 176
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	80 81       	ld	r24, Z
     9d0:	e8 2e       	mov	r14, r24
     9d2:	e6 94       	lsr	r14
     9d4:	e6 94       	lsr	r14
     9d6:	e6 94       	lsr	r14
     9d8:	e6 94       	lsr	r14
		y = GET_Y_POSITION(asteroids[asteroidNumber]);
		
		// Work out the new position (but don't update the projectile
		// location yet - we only do that if we know the move is valid)
		y = y-1;
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	f8 2e       	mov	r15, r24
     9de:	1f ef       	ldi	r17, 0xFF	; 255
     9e0:	18 0f       	add	r17, r24
		
		if(y == -1) {
     9e2:	1f 3f       	cpi	r17, 0xFF	; 255
     9e4:	51 f5       	brne	.+84     	; 0xa3a <advance_asteroids+0x90>
			//remove_asteroid(asteroidNumber);
			//if (numAsteroids < MAX_ASTEROIDS) {
			redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     9e6:	d0 2e       	mov	r13, r16
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	80 2f       	mov	r24, r16
     9ec:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
			// Find position that isn't occupied
			do {
				newX = (uint8_t)(rand() % FIELD_WIDTH);
     9f0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <rand>
     9f4:	87 70       	andi	r24, 0x07	; 7
     9f6:	90 78       	andi	r25, 0x80	; 128
     9f8:	99 23       	and	r25, r25
     9fa:	24 f4       	brge	.+8      	; 0xa04 <advance_asteroids+0x5a>
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	88 6f       	ori	r24, 0xF8	; 248
     a00:	9f 6f       	ori	r25, 0xFF	; 255
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	18 2f       	mov	r17, r24
				//newY = (uint8_t)(3 + (rand() % (FIELD_HEIGHT-3)));
				newY = FIELD_HEIGHT-1;
					
			} while (asteroid_at(newX, newY) != -1);
     a06:	6f e0       	ldi	r22, 0x0F	; 15
     a08:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     a0c:	8f 3f       	cpi	r24, 0xFF	; 255
     a0e:	81 f7       	brne	.-32     	; 0x9f0 <advance_asteroids+0x46>
				
				
			// Update the asteroid's position
			asteroids[asteroidNumber] = GAME_POSITION(newX,newY);
     a10:	c0 5b       	subi	r28, 0xB0	; 176
     a12:	de 4f       	sbci	r29, 0xFE	; 254
     a14:	12 95       	swap	r17
     a16:	10 7f       	andi	r17, 0xF0	; 240
     a18:	1f 60       	ori	r17, 0x0F	; 15
     a1a:	18 83       	st	Y, r17
				
			// Redraw the asteroid
			redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     a1c:	60 ef       	ldi	r22, 0xF0	; 240
     a1e:	8d 2d       	mov	r24, r13
     a20:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
			if (asteroid_at(x, y+1) != -1) {
     a24:	6f 2d       	mov	r22, r15
     a26:	8e 2d       	mov	r24, r14
     a28:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     a2c:	8f 3f       	cpi	r24, 0xFF	; 255
     a2e:	09 f4       	brne	.+2      	; 0xa32 <advance_asteroids+0x88>
     a30:	61 c0       	rjmp	.+194    	; 0xaf4 <advance_asteroids+0x14a>
				redraw_asteroid(asteroid_at(x, y+1), COLOUR_ASTEROID);
     a32:	60 ef       	ldi	r22, 0xF0	; 240
     a34:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
     a38:	5d c0       	rjmp	.+186    	; 0xaf4 <advance_asteroids+0x14a>
			//numAsteroids++;
			asteroidNumber++;
			//}
		} else {
			
			if ((projectile_at(x,y)) != -1) {
     a3a:	61 2f       	mov	r22, r17
     a3c:	8e 2d       	mov	r24, r14
     a3e:	0e 94 c3 01 	call	0x386	; 0x386 <projectile_at>
     a42:	8f 3f       	cpi	r24, 0xFF	; 255
     a44:	e9 f1       	breq	.+122    	; 0xac0 <advance_asteroids+0x116>
				remove_projectile(projectile_at(x,y));
     a46:	0e 94 84 02 	call	0x508	; 0x508 <remove_projectile>
				//remove_asteroid(asteroidNumber);
				redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     a4a:	d0 2e       	mov	r13, r16
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	80 2f       	mov	r24, r16
     a50:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
				do {
					newX = (uint8_t)(random() % FIELD_WIDTH);
     a54:	0e 94 0f 0c 	call	0x181e	; 0x181e <random>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	87 70       	andi	r24, 0x07	; 7
     a5e:	99 27       	eor	r25, r25
     a60:	aa 27       	eor	r26, r26
     a62:	b0 78       	andi	r27, 0x80	; 128
     a64:	bb 23       	and	r27, r27
     a66:	54 f4       	brge	.+20     	; 0xa7c <advance_asteroids+0xd2>
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	a1 09       	sbc	r26, r1
     a6c:	b1 09       	sbc	r27, r1
     a6e:	88 6f       	ori	r24, 0xF8	; 248
     a70:	9f 6f       	ori	r25, 0xFF	; 255
     a72:	af 6f       	ori	r26, 0xFF	; 255
     a74:	bf 6f       	ori	r27, 0xFF	; 255
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	a1 1d       	adc	r26, r1
     a7a:	b1 1d       	adc	r27, r1
     a7c:	18 2f       	mov	r17, r24

					//newY = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
					newY = FIELD_HEIGHT-1;
				} while (projectile_at(newX,newY) != -1);
     a7e:	6f e0       	ldi	r22, 0x0F	; 15
     a80:	0e 94 c3 01 	call	0x386	; 0x386 <projectile_at>
     a84:	8f 3f       	cpi	r24, 0xFF	; 255
     a86:	31 f7       	brne	.-52     	; 0xa54 <advance_asteroids+0xaa>
				//asteroids[numAsteroids] = GAME_POSITION(newX,newY);
				asteroids[asteroidNumber] = GAME_POSITION(newX,newY);
     a88:	c0 5b       	subi	r28, 0xB0	; 176
     a8a:	de 4f       	sbci	r29, 0xFE	; 254
     a8c:	20 e1       	ldi	r18, 0x10	; 16
     a8e:	12 9f       	mul	r17, r18
     a90:	c0 01       	movw	r24, r0
     a92:	11 24       	eor	r1, r1
     a94:	8f 60       	ori	r24, 0x0F	; 15
     a96:	88 83       	st	Y, r24
				//numAsteroids++;
				redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     a98:	60 ef       	ldi	r22, 0xF0	; 240
     a9a:	8d 2d       	mov	r24, r13
     a9c:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
				if (asteroid_at(x, y+1) != -1) {
     aa0:	6f 2d       	mov	r22, r15
     aa2:	8e 2d       	mov	r24, r14
     aa4:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     aa8:	8f 3f       	cpi	r24, 0xFF	; 255
     aaa:	19 f0       	breq	.+6      	; 0xab2 <advance_asteroids+0x108>
					redraw_asteroid(asteroid_at(x, y+1), COLOUR_ASTEROID);
     aac:	60 ef       	ldi	r22, 0xF0	; 240
     aae:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
				}
				asteroidNumber++;
				

				add_to_score(1);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <add_to_score>
				display_score();
     aba:	0e 94 de 07 	call	0xfbc	; 0xfbc <display_score>
     abe:	1a c0       	rjmp	.+52     	; 0xaf4 <advance_asteroids+0x14a>
				
			} else {
				// OTHERWISE...

				// Remove the asteroid from the display
				redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	80 2f       	mov	r24, r16
     ac4:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
				
				// Update the asteroid's position
				asteroids[asteroidNumber] = GAME_POSITION(x,y);
     ac8:	c0 5b       	subi	r28, 0xB0	; 176
     aca:	de 4f       	sbci	r29, 0xFE	; 254
     acc:	20 e1       	ldi	r18, 0x10	; 16
     ace:	e2 9e       	mul	r14, r18
     ad0:	c0 01       	movw	r24, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	1f 70       	andi	r17, 0x0F	; 15
     ad6:	18 2b       	or	r17, r24
     ad8:	18 83       	st	Y, r17
				
				// Redraw the asteroid
				redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     ada:	60 ef       	ldi	r22, 0xF0	; 240
     adc:	80 2f       	mov	r24, r16
     ade:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
				
				if (asteroid_at(x, y+1) != -1) {
     ae2:	6f 2d       	mov	r22, r15
     ae4:	8e 2d       	mov	r24, r14
     ae6:	0e 94 9b 01 	call	0x336	; 0x336 <asteroid_at>
     aea:	8f 3f       	cpi	r24, 0xFF	; 255
     aec:	19 f0       	breq	.+6      	; 0xaf4 <advance_asteroids+0x14a>
					redraw_asteroid(asteroid_at(x, y+1), COLOUR_ASTEROID);
     aee:	60 ef       	ldi	r22, 0xF0	; 240
     af0:	0e 94 26 02 	call	0x44c	; 0x44c <redraw_asteroid>
     af4:	0f 5f       	subi	r16, 0xFF	; 255
	uint8_t newX,newY;
	int8_t asteroidNumber;
	
	redraw_whole_display();
	asteroidNumber = 0;
	while(asteroidNumber < numAsteroids) {
     af6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <numAsteroids>
     afa:	08 17       	cp	r16, r24
     afc:	0c f4       	brge	.+2      	; 0xb00 <advance_asteroids+0x156>
     afe:	60 cf       	rjmp	.-320    	; 0x9c0 <advance_asteroids+0x16>
				// next projectile (if any) will take on the same projectile number)
				asteroidNumber++;
			}
		}
	}
	baseHitDetection();
     b00:	0e 94 52 04 	call	0x8a4	; 0x8a4 <baseHitDetection>
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	08 95       	ret

00000b14 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	0e 94 1c 0a 	call	0x1438	; 0x1438 <spi_setup_master>
     b1a:	08 95       	ret

00000b1c <ledmatrix_update_pixel>:
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	80 31       	cpi	r24, 0x10	; 16
     b24:	b0 f4       	brcc	.+44     	; 0xb52 <ledmatrix_update_pixel+0x36>
     b26:	68 30       	cpi	r22, 0x08	; 8
     b28:	a0 f4       	brcc	.+40     	; 0xb52 <ledmatrix_update_pixel+0x36>
     b2a:	14 2f       	mov	r17, r20
     b2c:	c6 2f       	mov	r28, r22
     b2e:	d8 2f       	mov	r29, r24
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b36:	6c 2f       	mov	r22, r28
     b38:	67 70       	andi	r22, 0x07	; 7
     b3a:	80 e1       	ldi	r24, 0x10	; 16
     b3c:	68 9f       	mul	r22, r24
     b3e:	90 01       	movw	r18, r0
     b40:	11 24       	eor	r1, r1
     b42:	8d 2f       	mov	r24, r29
     b44:	8f 70       	andi	r24, 0x0F	; 15
     b46:	82 2b       	or	r24, r18
     b48:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b4c:	81 2f       	mov	r24, r17
     b4e:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	08 95       	ret

00000b5a <ledmatrix_update_column>:
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	80 31       	cpi	r24, 0x10	; 16
     b64:	90 f4       	brcc	.+36     	; 0xb8a <ledmatrix_update_column+0x30>
     b66:	8b 01       	movw	r16, r22
     b68:	c8 2f       	mov	r28, r24
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b70:	8c 2f       	mov	r24, r28
     b72:	8f 70       	andi	r24, 0x0F	; 15
     b74:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b78:	e8 01       	movw	r28, r16
     b7a:	08 5f       	subi	r16, 0xF8	; 248
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	89 91       	ld	r24, Y+
     b80:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b84:	c0 17       	cp	r28, r16
     b86:	d1 07       	cpc	r29, r17
     b88:	d1 f7       	brne	.-12     	; 0xb7e <ledmatrix_update_column+0x24>
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <ledmatrix_shift_display_left>:
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     ba0:	08 95       	ret

00000ba2 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     ba2:	8f e0       	ldi	r24, 0x0F	; 15
     ba4:	0e 94 44 0a 	call	0x1488	; 0x1488 <spi_send_byte>
     ba8:	08 95       	ret

00000baa <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     baa:	0e 94 8a 05 	call	0xb14	; 0xb14 <ledmatrix_setup>
	init_button_interrupts();
     bae:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	7b e4       	ldi	r23, 0x4B	; 75
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 34 09 	call	0x1268	; 0x1268 <init_serial_stdio>
	
	init_timer0();
     bc0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <init_timer0>
	
	// Turn on global interrupts
	sei();
     bc4:	78 94       	sei
     bc6:	08 95       	ret

00000bc8 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     bc8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <clear_terminal>
	move_cursor(10,10);
     bcc:	6a e0       	ldi	r22, 0x0A	; 10
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	8a e0       	ldi	r24, 0x0A	; 10
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <move_cursor>
	printf_P(PSTR("Asteroids"));
     bd8:	84 ee       	ldi	r24, 0xE4	; 228
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
	move_cursor(10,12);
     be4:	6c e0       	ldi	r22, 0x0C	; 12
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	8a e0       	ldi	r24, 0x0A	; 10
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 4a 0a 	call	0x1494	; 0x1494 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Bosheng Zhang 45004830"));
     bf0:	84 eb       	ldi	r24, 0xB4	; 180
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
	
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     bfc:	0e 94 d1 05 	call	0xba2	; 0xba2 <ledmatrix_clear>
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("ASTEROIDS 45004830", COLOUR_GREEN);
     c08:	60 ef       	ldi	r22, 0xF0	; 240
     c0a:	81 e2       	ldi	r24, 0x21	; 33
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 fd 07 	call	0xffa	; 0xffa <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     c12:	0d c0       	rjmp	.+26     	; 0xc2e <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c14:	2f e7       	ldi	r18, 0x7F	; 127
     c16:	89 ea       	ldi	r24, 0xA9	; 169
     c18:	93 e0       	ldi	r25, 0x03	; 3
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	80 40       	sbci	r24, 0x00	; 0
     c1e:	90 40       	sbci	r25, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <splash_screen+0x52>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <splash_screen+0x5c>
     c24:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     c26:	0e 94 20 01 	call	0x240	; 0x240 <button_pushed>
     c2a:	8f 3f       	cpi	r24, 0xFF	; 255
     c2c:	29 f4       	brne	.+10     	; 0xc38 <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("ASTEROIDS 45004830", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     c2e:	0e 94 0c 08 	call	0x1018	; 0x1018 <scroll_display>
     c32:	81 11       	cpse	r24, r1
     c34:	ef cf       	rjmp	.-34     	; 0xc14 <splash_screen+0x4c>
     c36:	e8 cf       	rjmp	.-48     	; 0xc08 <splash_screen+0x40>
     c38:	08 95       	ret

00000c3a <new_game>:
	}
}

void new_game(void) {
	// Initialize the game and display
	initialise_game();
     c3a:	0e 94 c3 03 	call	0x786	; 0x786 <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
     c3e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <clear_terminal>
	
	// Initialize the score
	init_score();
     c42:	0e 94 a5 07 	call	0xf4a	; 0xf4a <init_score>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     c46:	0e 94 20 01 	call	0x240	; 0x240 <button_pushed>
	clear_serial_input_buffer();
     c4a:	0e 94 82 09 	call	0x1304	; 0x1304 <clear_serial_input_buffer>
     c4e:	08 95       	ret

00000c50 <play_game>:
}

void play_game(void) {
     c50:	2f 92       	push	r2
     c52:	3f 92       	push	r3
     c54:	4f 92       	push	r4
     c56:	5f 92       	push	r5
     c58:	6f 92       	push	r6
     c5a:	7f 92       	push	r7
     c5c:	8f 92       	push	r8
     c5e:	9f 92       	push	r9
     c60:	af 92       	push	r10
     c62:	bf 92       	push	r11
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
	//isPause=0: not pause, =1: yes
	uint8_t isPause = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	display_score();
     c72:	0e 94 de 07 	call	0xfbc	; 0xfbc <display_score>
	display_health_bar();
     c76:	0e 94 3b 04 	call	0x876	; 0x876 <display_health_bar>
	
	current_time = get_current_time();
     c7a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <get_current_time>
     c7e:	4b 01       	movw	r8, r22
     c80:	5c 01       	movw	r10, r24
	last_move_time = current_time;
	last_move_time_asteroids = current_time;
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
	uint32_t current_time, last_move_time, last_move_time_asteroids;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	//isPause=0: not pause, =1: yes
	uint8_t isPause = 0;
     c86:	10 e0       	ldi	r17, 0x00	; 0

void play_game(void) {
	uint32_t current_time, last_move_time, last_move_time_asteroids;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     c88:	31 2c       	mov	r3, r1
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     c8a:	22 24       	eor	r2, r2
     c8c:	2a 94       	dec	r2
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			if (isPause == 1) {
				unpause_clock();
				//current_time = get_current_time() - pause_time;
				isPause = 0;
     c8e:	00 e0       	ldi	r16, 0x00	; 0
	
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_time_asteroids = current_time;
	// We play the game until it's over
	while(!is_game_over()) {
     c90:	8c c0       	rjmp	.+280    	; 0xdaa <play_game+0x15a>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     c92:	0e 94 20 01 	call	0x240	; 0x240 <button_pushed>
     c96:	c8 2f       	mov	r28, r24
		
		if(button == NO_BUTTON_PUSHED) {
     c98:	8f 3f       	cpi	r24, 0xFF	; 255
     c9a:	09 f0       	breq	.+2      	; 0xc9e <play_game+0x4e>
     c9c:	93 c0       	rjmp	.+294    	; 0xdc4 <play_game+0x174>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     c9e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <serial_input_available>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <play_game+0x58>
     ca6:	53 c0       	rjmp	.+166    	; 0xd4e <play_game+0xfe>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     ca8:	ed e7       	ldi	r30, 0x7D	; 125
     caa:	f2 e0       	ldi	r31, 0x02	; 2
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     cb4:	31 10       	cpse	r3, r1
     cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <play_game+0x72>
     cb8:	8b 31       	cpi	r24, 0x1B	; 27
     cba:	09 f4       	brne	.+2      	; 0xcbe <play_game+0x6e>
     cbc:	7c c0       	rjmp	.+248    	; 0xdb6 <play_game+0x166>
     cbe:	92 2d       	mov	r25, r2
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <play_game+0x8c>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	3f 12       	cpse	r3, r31
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <play_game+0x82>
     cc8:	8b 35       	cpi	r24, 0x5B	; 91
     cca:	09 f4       	brne	.+2      	; 0xcce <play_game+0x7e>
     ccc:	77 c0       	rjmp	.+238    	; 0xdbc <play_game+0x16c>
     cce:	92 2d       	mov	r25, r2
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <play_game+0x8c>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	39 12       	cpse	r3, r25
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <play_game+0x92>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     cd8:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     cda:	82 2d       	mov	r24, r2
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     cdc:	94 34       	cpi	r25, 0x44	; 68
     cde:	11 f4       	brne	.+4      	; 0xce4 <play_game+0x94>
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <play_game+0xa2>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     ce2:	92 2d       	mov	r25, r2
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     ce4:	28 2f       	mov	r18, r24
     ce6:	2f 7d       	andi	r18, 0xDF	; 223
     ce8:	2c 34       	cpi	r18, 0x4C	; 76
     cea:	09 f0       	breq	.+2      	; 0xcee <play_game+0x9e>
     cec:	6f c0       	rjmp	.+222    	; 0xdcc <play_game+0x17c>
     cee:	30 2e       	mov	r3, r16
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <play_game+0xa4>
     cf2:	30 2e       	mov	r3, r16
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			if (isPause == 0) {
     cf4:	11 11       	cpse	r17, r1
     cf6:	2b c0       	rjmp	.+86     	; 0xd4e <play_game+0xfe>
				move_base(MOVE_LEFT);
     cf8:	80 2f       	mov	r24, r16
     cfa:	0e 94 b3 04 	call	0x966	; 0x966 <move_base>
     cfe:	27 c0       	rjmp	.+78     	; 0xd4e <play_game+0xfe>
			}
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     d00:	80 32       	cpi	r24, 0x20	; 32
     d02:	41 f4       	brne	.+16     	; 0xd14 <play_game+0xc4>
     d04:	30 2e       	mov	r3, r16
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <play_game+0xba>
     d08:	30 2e       	mov	r3, r16
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			if (isPause == 0) {
     d0a:	11 11       	cpse	r17, r1
     d0c:	20 c0       	rjmp	.+64     	; 0xd4e <play_game+0xfe>
				fire_projectile();
     d0e:	0e 94 ad 02 	call	0x55a	; 0x55a <fire_projectile>
     d12:	1d c0       	rjmp	.+58     	; 0xd4e <play_game+0xfe>
     d14:	30 2e       	mov	r3, r16
			}
		} else if(button==1 || escape_sequence_char=='B') {
     d16:	c1 30       	cpi	r28, 0x01	; 1
     d18:	d1 f0       	breq	.+52     	; 0xd4e <play_game+0xfe>
     d1a:	92 34       	cpi	r25, 0x42	; 66
     d1c:	c1 f0       	breq	.+48     	; 0xd4e <play_game+0xfe>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
     d1e:	cc 23       	and	r28, r28
     d20:	29 f0       	breq	.+10     	; 0xd2c <play_game+0xdc>
     d22:	93 34       	cpi	r25, 0x43	; 67
     d24:	19 f0       	breq	.+6      	; 0xd2c <play_game+0xdc>
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	82 35       	cpi	r24, 0x52	; 82
     d2a:	31 f4       	brne	.+12     	; 0xd38 <play_game+0xe8>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			if (isPause == 0) {
     d2c:	11 11       	cpse	r17, r1
     d2e:	0f c0       	rjmp	.+30     	; 0xd4e <play_game+0xfe>
				move_base(MOVE_RIGHT);				
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 b3 04 	call	0x966	; 0x966 <move_base>
     d36:	0b c0       	rjmp	.+22     	; 0xd4e <play_game+0xfe>
			}
		} else if(serial_input == 'p' || serial_input == 'P') {
     d38:	80 35       	cpi	r24, 0x50	; 80
     d3a:	49 f4       	brne	.+18     	; 0xd4e <play_game+0xfe>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			if (isPause == 1) {
     d3c:	11 30       	cpi	r17, 0x01	; 1
     d3e:	21 f4       	brne	.+8      	; 0xd48 <play_game+0xf8>
				unpause_clock();
     d40:	0e 94 24 0b 	call	0x1648	; 0x1648 <unpause_clock>
				//current_time = get_current_time() - pause_time;
				isPause = 0;
     d44:	10 2f       	mov	r17, r16
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <play_game+0xfe>
			}
			else {
				pause_clock();
     d48:	0e 94 20 0b 	call	0x1640	; 0x1640 <pause_clock>
				isPause = 1;
     d4c:	11 e0       	ldi	r17, 0x01	; 1
		} 

		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
     d4e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <get_current_time>
     d52:	6b 01       	movw	r12, r22
     d54:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= last_move_time + 500) {
     d56:	0e 94 96 03 	call	0x72c	; 0x72c <is_game_over>
     d5a:	81 11       	cpse	r24, r1
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <play_game+0x12c>
     d5e:	d5 01       	movw	r26, r10
     d60:	c4 01       	movw	r24, r8
     d62:	8c 50       	subi	r24, 0x0C	; 12
     d64:	9e 4f       	sbci	r25, 0xFE	; 254
     d66:	af 4f       	sbci	r26, 0xFF	; 255
     d68:	bf 4f       	sbci	r27, 0xFF	; 255
     d6a:	c8 16       	cp	r12, r24
     d6c:	d9 06       	cpc	r13, r25
     d6e:	ea 06       	cpc	r14, r26
     d70:	fb 06       	cpc	r15, r27
     d72:	20 f0       	brcs	.+8      	; 0xd7c <play_game+0x12c>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we 
			// moved them
			advance_projectiles();
     d74:	0e 94 d5 02 	call	0x5aa	; 0x5aa <advance_projectiles>
			
			
			last_move_time = current_time;
     d78:	46 01       	movw	r8, r12
     d7a:	57 01       	movw	r10, r14
		} 
		if (!is_game_over() && current_time >= last_move_time_asteroids + asteroidAcceleration()) {
     d7c:	0e 94 96 03 	call	0x72c	; 0x72c <is_game_over>
     d80:	81 11       	cpse	r24, r1
     d82:	13 c0       	rjmp	.+38     	; 0xdaa <play_game+0x15a>
     d84:	0e 94 83 03 	call	0x706	; 0x706 <asteroidAcceleration>
     d88:	09 2e       	mov	r0, r25
     d8a:	00 0c       	add	r0, r0
     d8c:	aa 0b       	sbc	r26, r26
     d8e:	bb 0b       	sbc	r27, r27
     d90:	84 0d       	add	r24, r4
     d92:	95 1d       	adc	r25, r5
     d94:	a6 1d       	adc	r26, r6
     d96:	b7 1d       	adc	r27, r7
     d98:	c8 16       	cp	r12, r24
     d9a:	d9 06       	cpc	r13, r25
     d9c:	ea 06       	cpc	r14, r26
     d9e:	fb 06       	cpc	r15, r27
     da0:	20 f0       	brcs	.+8      	; 0xdaa <play_game+0x15a>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we
			// moved them
			advance_asteroids();
     da2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <advance_asteroids>
			
			
			last_move_time_asteroids = current_time;
     da6:	26 01       	movw	r4, r12
     da8:	37 01       	movw	r6, r14
	
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_time_asteroids = current_time;
	// We play the game until it's over
	while(!is_game_over()) {
     daa:	0e 94 96 03 	call	0x72c	; 0x72c <is_game_over>
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <play_game+0x164>
     db2:	6f cf       	rjmp	.-290    	; 0xc92 <play_game+0x42>
     db4:	15 c0       	rjmp	.+42     	; 0xde0 <play_game+0x190>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     db6:	33 24       	eor	r3, r3
     db8:	33 94       	inc	r3
     dba:	c9 cf       	rjmp	.-110    	; 0xd4e <play_game+0xfe>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     dbc:	68 94       	set
     dbe:	33 24       	eor	r3, r3
     dc0:	31 f8       	bld	r3, 1
     dc2:	c5 cf       	rjmp	.-118    	; 0xd4e <play_game+0xfe>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	09 f4       	brne	.+2      	; 0xdca <play_game+0x17a>
     dc8:	95 cf       	rjmp	.-214    	; 0xcf4 <play_game+0xa4>
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <play_game+0x184>
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			if (isPause == 0) {
				move_base(MOVE_LEFT);
			}
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     dcc:	91 34       	cpi	r25, 0x41	; 65
     dce:	09 f0       	breq	.+2      	; 0xdd2 <play_game+0x182>
     dd0:	97 cf       	rjmp	.-210    	; 0xd00 <play_game+0xb0>
     dd2:	9a cf       	rjmp	.-204    	; 0xd08 <play_game+0xb8>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	09 f4       	brne	.+2      	; 0xdda <play_game+0x18a>
     dd8:	98 cf       	rjmp	.-208    	; 0xd0a <play_game+0xba>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     dda:	92 2d       	mov	r25, r2
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     ddc:	82 2d       	mov	r24, r2
     dde:	9b cf       	rjmp	.-202    	; 0xd16 <play_game+0xc6>
			last_move_time_asteroids = current_time;
		}
		
	}
	// We get here if the game is over.
}
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	5f 90       	pop	r5
     dfc:	4f 90       	pop	r4
     dfe:	3f 90       	pop	r3
     e00:	2f 90       	pop	r2
     e02:	08 95       	ret

00000e04 <handle_game_over>:

void handle_game_over() {
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
	move_cursor(10,14);
     e18:	6e e0       	ldi	r22, 0x0E	; 14
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	8a e0       	ldi	r24, 0x0A	; 10
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 4a 0a 	call	0x1494	; 0x1494 <move_cursor>
	printf_P(PSTR("GAME OVER"));
     e24:	8a ea       	ldi	r24, 0xAA	; 170
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
	move_cursor(10,15);
     e30:	6f e0       	ldi	r22, 0x0F	; 15
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	8a e0       	ldi	r24, 0x0A	; 10
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 4a 0a 	call	0x1494	; 0x1494 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     e3c:	8c e8       	ldi	r24, 0x8C	; 140
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9f 93       	push	r25
     e42:	8f 93       	push	r24
     e44:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
		int8_t x2 = basePosition - 1;
		int8_t x3 = basePosition;
		int8_t x4 = basePosition + 1;
		int8_t x1 = basePosition - 2;
		int8_t x5 = basePosition + 2;
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x2, 0), COLOUR_RED);
     e50:	68 94       	set
     e52:	aa 24       	eor	r10, r10
     e54:	a3 f8       	bld	r10, 3
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x3, 0), COLOUR_RED);
     e56:	0f 2e       	mov	r0, r31
     e58:	f7 e0       	ldi	r31, 0x07	; 7
     e5a:	bf 2e       	mov	r11, r31
     e5c:	f0 2d       	mov	r31, r0
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 0), COLOUR_RED);
     e5e:	0f 2e       	mov	r0, r31
     e60:	f6 e0       	ldi	r31, 0x06	; 6
     e62:	cf 2e       	mov	r12, r31
     e64:	f0 2d       	mov	r31, r0
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x3, 1), COLOUR_RED);
		
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x1, 0), COLOUR_LIGHT_ORANGE);
     e66:	0f 2e       	mov	r0, r31
     e68:	f9 e0       	ldi	r31, 0x09	; 9
     e6a:	df 2e       	mov	r13, r31
     e6c:	f0 2d       	mov	r31, r0
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x2, 1), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x2, 3), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x3, 2), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 1), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 3), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x5, 0), COLOUR_LIGHT_ORANGE); 
     e6e:	0f 2e       	mov	r0, r31
     e70:	f5 e0       	ldi	r31, 0x05	; 5
     e72:	ef 2e       	mov	r14, r31
     e74:	f0 2d       	mov	r31, r0
void handle_game_over() {
	move_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == NO_BUTTON_PUSHED) {
     e76:	4e c0       	rjmp	.+156    	; 0xf14 <handle_game_over+0x110>
		int8_t x2 = basePosition - 1;
     e78:	c0 91 64 01 	lds	r28, 0x0164	; 0x800164 <basePosition>
		int8_t x3 = basePosition;
		int8_t x4 = basePosition + 1;
		int8_t x1 = basePosition - 2;
		int8_t x5 = basePosition + 2;
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x2, 0), COLOUR_RED);
     e7c:	0a 2d       	mov	r16, r10
     e7e:	0c 1b       	sub	r16, r28
     e80:	4f e0       	ldi	r20, 0x0F	; 15
     e82:	60 2f       	mov	r22, r16
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x3, 0), COLOUR_RED);
     e8a:	1b 2d       	mov	r17, r11
     e8c:	1c 1b       	sub	r17, r28
     e8e:	4f e0       	ldi	r20, 0x0F	; 15
     e90:	61 2f       	mov	r22, r17
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 0), COLOUR_RED);
     e98:	dc 2d       	mov	r29, r12
     e9a:	dc 1b       	sub	r29, r28
     e9c:	4f e0       	ldi	r20, 0x0F	; 15
     e9e:	6d 2f       	mov	r22, r29
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x3, 1), COLOUR_RED);
     ea6:	4f e0       	ldi	r20, 0x0F	; 15
     ea8:	61 2f       	mov	r22, r17
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x1, 0), COLOUR_LIGHT_ORANGE);
     eb0:	fd 2c       	mov	r15, r13
     eb2:	fc 1a       	sub	r15, r28
     eb4:	43 e1       	ldi	r20, 0x13	; 19
     eb6:	6f 2d       	mov	r22, r15
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x1, 1), COLOUR_LIGHT_ORANGE);
     ebe:	43 e1       	ldi	r20, 0x13	; 19
     ec0:	6f 2d       	mov	r22, r15
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x2, 1), COLOUR_LIGHT_ORANGE);
     ec8:	43 e1       	ldi	r20, 0x13	; 19
     eca:	60 2f       	mov	r22, r16
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x2, 3), COLOUR_LIGHT_ORANGE);
     ed2:	43 e1       	ldi	r20, 0x13	; 19
     ed4:	60 2f       	mov	r22, r16
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x3, 2), COLOUR_LIGHT_ORANGE);
     edc:	43 e1       	ldi	r20, 0x13	; 19
     ede:	61 2f       	mov	r22, r17
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 1), COLOUR_LIGHT_ORANGE);
     ee6:	43 e1       	ldi	r20, 0x13	; 19
     ee8:	6d 2f       	mov	r22, r29
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 3), COLOUR_LIGHT_ORANGE);
     ef0:	43 e1       	ldi	r20, 0x13	; 19
     ef2:	6d 2f       	mov	r22, r29
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x5, 0), COLOUR_LIGHT_ORANGE); 
     efa:	8e 2d       	mov	r24, r14
     efc:	8c 1b       	sub	r24, r28
     efe:	c8 2f       	mov	r28, r24
     f00:	43 e1       	ldi	r20, 0x13	; 19
     f02:	68 2f       	mov	r22, r24
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x5, 2), COLOUR_LIGHT_ORANGE);// wait
     f0a:	43 e1       	ldi	r20, 0x13	; 19
     f0c:	6c 2f       	mov	r22, r28
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ledmatrix_update_pixel>
void handle_game_over() {
	move_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == NO_BUTTON_PUSHED) {
     f14:	0e 94 20 01 	call	0x240	; 0x240 <button_pushed>
     f18:	8f 3f       	cpi	r24, 0xFF	; 255
     f1a:	09 f4       	brne	.+2      	; 0xf1e <handle_game_over+0x11a>
     f1c:	ad cf       	rjmp	.-166    	; 0xe78 <handle_game_over+0x74>
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 1), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x4, 3), COLOUR_LIGHT_ORANGE);
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x5, 0), COLOUR_LIGHT_ORANGE); 
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x5, 2), COLOUR_LIGHT_ORANGE);// wait
	}
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	08 95       	ret

00000f34 <main>:
int8_t		basePosition;
/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     f34:	0e 94 d5 05 	call	0xbaa	; 0xbaa <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     f38:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <splash_screen>
	
	while(1) {
		new_game();
     f3c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <new_game>
		play_game();
     f40:	0e 94 28 06 	call	0xc50	; 0xc50 <play_game>
		handle_game_over();
     f44:	0e 94 02 07 	call	0xe04	; 0xe04 <handle_game_over>
     f48:	f9 cf       	rjmp	.-14     	; 0xf3c <main+0x8>

00000f4a <init_score>:
// Seven segment display - segment values for digits 0 to 9

int32_t score;

void init_score(void) {
	score = 0;
     f4a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <score>
     f4e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <score+0x1>
     f52:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <score+0x2>
     f56:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <score+0x3>
     f5a:	08 95       	ret

00000f5c <add_to_score>:
}

void add_to_score(int16_t value) {
	score += value;
     f5c:	09 2e       	mov	r0, r25
     f5e:	00 0c       	add	r0, r0
     f60:	aa 0b       	sbc	r26, r26
     f62:	bb 0b       	sbc	r27, r27
     f64:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <score>
     f68:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <score+0x1>
     f6c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <score+0x2>
     f70:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <score+0x3>
     f74:	84 0f       	add	r24, r20
     f76:	95 1f       	adc	r25, r21
     f78:	a6 1f       	adc	r26, r22
     f7a:	b7 1f       	adc	r27, r23
	
	if (score <= 0) {
     f7c:	18 16       	cp	r1, r24
     f7e:	19 06       	cpc	r1, r25
     f80:	1a 06       	cpc	r1, r26
     f82:	1b 06       	cpc	r1, r27
     f84:	4c f4       	brge	.+18     	; 0xf98 <add_to_score+0x3c>
void init_score(void) {
	score = 0;
}

void add_to_score(int16_t value) {
	score += value;
     f86:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <score>
     f8a:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <score+0x1>
     f8e:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <score+0x2>
     f92:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <score+0x3>
     f96:	08 95       	ret
	
	if (score <= 0) {
		score = 0;
     f98:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <score>
     f9c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <score+0x1>
     fa0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <score+0x2>
     fa4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <score+0x3>
     fa8:	08 95       	ret

00000faa <get_score>:
	}
}

uint32_t get_score(void) {
	return score;
     faa:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <score>
     fae:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <score+0x1>
     fb2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <score+0x2>
     fb6:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <score+0x3>
}
     fba:	08 95       	ret

00000fbc <display_score>:

void display_score(void) {
	move_cursor(10,10);
     fbc:	6a e0       	ldi	r22, 0x0A	; 10
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	8a e0       	ldi	r24, 0x0A	; 10
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <move_cursor>
	printf_P(PSTR("Scores: %8d"), get_score());
     fc8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <score+0x3>
     fcc:	8f 93       	push	r24
     fce:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <score+0x2>
     fd2:	8f 93       	push	r24
     fd4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <score+0x1>
     fd8:	8f 93       	push	r24
     fda:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <score>
     fde:	8f 93       	push	r24
     fe0:	8e ee       	ldi	r24, 0xEE	; 238
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9f 93       	push	r25
     fe6:	8f 93       	push	r24
     fe8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	08 95       	ret

00000ffa <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     ffa:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <colour>
	display_string = string_to_display;
     ffe:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <display_string+0x1>
    1002:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <display_string>
	next_col_ptr = 0;
    1006:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <next_col_ptr+0x1>
    100a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <next_col_ptr>
	next_char_to_display = 0;
    100e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <next_char_to_display+0x1>
    1012:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <next_char_to_display>
    1016:	08 95       	ret

00001018 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	28 97       	sbiw	r28, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1030:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <next_col_ptr>
    1034:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <next_col_ptr+0x1>
    1038:	30 97       	sbiw	r30, 0x00	; 0
    103a:	81 f0       	breq	.+32     	; 0x105c <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    103c:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    103e:	10 ff       	sbrs	r17, 0
    1040:	06 c0       	rjmp	.+12     	; 0x104e <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1042:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <next_col_ptr+0x1>
    1046:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    104a:	00 e0       	ldi	r16, 0x00	; 0
    104c:	6b c0       	rjmp	.+214    	; 0x1124 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    104e:	31 96       	adiw	r30, 0x01	; 1
    1050:	f0 93 40 01 	sts	0x0140, r31	; 0x800140 <next_col_ptr+0x1>
    1054:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1058:	00 e0       	ldi	r16, 0x00	; 0
    105a:	64 c0       	rjmp	.+200    	; 0x1124 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    105c:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <next_char_to_display>
    1060:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <next_char_to_display+0x1>
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	09 f4       	brne	.+2      	; 0x106a <scroll_display+0x52>
    1068:	49 c0       	rjmp	.+146    	; 0x10fc <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    106a:	cf 01       	movw	r24, r30
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_char_to_display+0x1>
    1072:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_char_to_display>
    1076:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1078:	e1 11       	cpse	r30, r1
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    107c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <next_char_to_display+0x1>
    1080:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <next_char_to_display>
			shift_countdown = 16;
    1084:	80 e1       	ldi	r24, 0x10	; 16
    1086:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    108a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    108c:	10 e0       	ldi	r17, 0x00	; 0
    108e:	4a c0       	rjmp	.+148    	; 0x1124 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1090:	8f e9       	ldi	r24, 0x9F	; 159
    1092:	8e 0f       	add	r24, r30
    1094:	8a 31       	cpi	r24, 0x1A	; 26
    1096:	70 f4       	brcc	.+28     	; 0x10b4 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e4 5b       	subi	r30, 0xB4	; 180
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	85 91       	lpm	r24, Z+
    10a4:	94 91       	lpm	r25, Z
    10a6:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_col_ptr+0x1>
    10aa:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    10ae:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	38 c0       	rjmp	.+112    	; 0x1124 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    10b4:	8f eb       	ldi	r24, 0xBF	; 191
    10b6:	8e 0f       	add	r24, r30
    10b8:	8a 31       	cpi	r24, 0x1A	; 26
    10ba:	70 f4       	brcc	.+28     	; 0x10d8 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	e4 57       	subi	r30, 0x74	; 116
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	85 91       	lpm	r24, Z+
    10c8:	94 91       	lpm	r25, Z
    10ca:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_col_ptr+0x1>
    10ce:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    10d2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	26 c0       	rjmp	.+76     	; 0x1124 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    10d8:	80 ed       	ldi	r24, 0xD0	; 208
    10da:	8e 0f       	add	r24, r30
    10dc:	8a 30       	cpi	r24, 0x0A	; 10
    10de:	00 f5       	brcc	.+64     	; 0x1120 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	e6 56       	subi	r30, 0x66	; 102
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	85 91       	lpm	r24, Z+
    10ec:	94 91       	lpm	r25, Z
    10ee:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <next_col_ptr+0x1>
    10f2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    10f6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    10fc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <display_string>
    1100:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1104:	01 e0       	ldi	r16, 0x01	; 1
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	09 f0       	breq	.+2      	; 0x110c <scroll_display+0xf4>
    110a:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    110c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <next_char_to_display+0x1>
    1110:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <next_char_to_display>
		display_string = 0;
    1114:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <display_string+0x1>
    1118:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1120:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1122:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1124:	0e 94 ca 05 	call	0xb94	; 0xb94 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1128:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <colour>
    112c:	fe 01       	movw	r30, r28
    112e:	38 96       	adiw	r30, 0x08	; 8
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1134:	11 23       	and	r17, r17
    1136:	14 f4       	brge	.+4      	; 0x113c <scroll_display+0x124>
			column_colour_data[i] = colour;
    1138:	20 83       	st	Z, r18
    113a:	01 c0       	rjmp	.+2      	; 0x113e <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    113c:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    113e:	11 0f       	add	r17, r17
    1140:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1142:	e8 17       	cp	r30, r24
    1144:	f9 07       	cpc	r31, r25
    1146:	b1 f7       	brne	.-20     	; 0x1134 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1148:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    114a:	be 01       	movw	r22, r28
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f e0       	ldi	r24, 0x0F	; 15
    1152:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1156:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <shift_countdown.1854>
    115a:	88 23       	and	r24, r24
    115c:	89 f0       	breq	.+34     	; 0x1180 <scroll_display+0x168>
		shift_countdown--;
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1164:	00 23       	and	r16, r16
    1166:	11 f0       	breq	.+4      	; 0x116c <scroll_display+0x154>
    1168:	88 23       	and	r24, r24
    116a:	11 f0       	breq	.+4      	; 0x1170 <scroll_display+0x158>
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <scroll_display+0x15e>
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <scroll_display+0x15e>
    1174:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	99 23       	and	r25, r25
    117a:	29 f0       	breq	.+10     	; 0x1186 <scroll_display+0x16e>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1180:	00 23       	and	r16, r16
    1182:	a1 f3       	breq	.-24     	; 0x116c <scroll_display+0x154>
    1184:	f7 cf       	rjmp	.-18     	; 0x1174 <scroll_display+0x15c>
	return !finished;
}
    1186:	28 96       	adiw	r28, 0x08	; 8
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    119c:	cf 93       	push	r28
    119e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    11a0:	8a 30       	cpi	r24, 0x0A	; 10
    11a2:	19 f4       	brne	.+6      	; 0x11aa <uart_put_char+0xe>
		uart_put_char('\r', stream);
    11a4:	8d e0       	ldi	r24, 0x0D	; 13
    11a6:	0e 94 ce 08 	call	0x119c	; 0x119c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    11aa:	9f b7       	in	r25, 0x3f	; 63
    11ac:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    11b0:	99 23       	and	r25, r25
    11b2:	29 f1       	breq	.+74     	; 0x11fe <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    11b4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
    11b8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ba:	d1 f3       	breq	.-12     	; 0x11b0 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    11bc:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    11be:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <out_insert_pos>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	8e 0f       	add	r24, r30
    11c6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <out_insert_pos>
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	e5 59       	subi	r30, 0x95	; 149
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    11d2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    11dc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <out_insert_pos>
    11e0:	8f 3f       	cpi	r24, 0xFF	; 255
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    11e4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    11e8:	e1 ec       	ldi	r30, 0xC1	; 193
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 62       	ori	r24, 0x20	; 32
    11f0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    11f2:	99 23       	and	r25, r25
    11f4:	39 f0       	breq	.+14     	; 0x1204 <uart_put_char+0x68>
		sei();
    11f6:	78 94       	sei
	}
	return 0;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
}
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    120c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <bytes_in_input_buffer>
    1210:	88 23       	and	r24, r24
    1212:	e1 f3       	breq	.-8      	; 0x120c <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1214:	2f b7       	in	r18, 0x3f	; 63
    1216:	20 78       	andi	r18, 0x80	; 128
	cli();
    1218:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    121a:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <input_insert_pos>
    121e:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <bytes_in_input_buffer>
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	83 1b       	sub	r24, r19
    1226:	91 09       	sbc	r25, r1
    1228:	5a f4       	brpl	.+22     	; 0x1240 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    122a:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <input_insert_pos>
    122e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	e8 1b       	sub	r30, r24
    1236:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1238:	e5 58       	subi	r30, 0x85	; 133
    123a:	fd 4f       	sbci	r31, 0xFD	; 253
    123c:	80 81       	ld	r24, Z
    123e:	0a c0       	rjmp	.+20     	; 0x1254 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1240:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <input_insert_pos>
    1244:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <bytes_in_input_buffer>
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	e8 1b       	sub	r30, r24
    124c:	f1 09       	sbc	r31, r1
    124e:	e5 59       	subi	r30, 0x95	; 149
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1254:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <bytes_in_input_buffer>
    1258:	91 50       	subi	r25, 0x01	; 1
    125a:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <bytes_in_input_buffer>
	if(interrupts_enabled) {
    125e:	22 23       	and	r18, r18
    1260:	09 f0       	breq	.+2      	; 0x1264 <uart_get_char+0x58>
		sei();
    1262:	78 94       	sei
	}	
	return c;
}
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	08 95       	ret

00001268 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1268:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <out_insert_pos>
	bytes_in_out_buffer = 0;
    126c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <bytes_in_out_buffer>
	input_insert_pos = 0;
    1270:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <input_insert_pos>
	bytes_in_input_buffer = 0;
    1274:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <bytes_in_input_buffer>
	input_overrun = 0;
    1278:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    127c:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	aa 1f       	adc	r26, r26
    128a:	bb 1f       	adc	r27, r27
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	9c 01       	movw	r18, r24
    1296:	ad 01       	movw	r20, r26
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	44 1f       	adc	r20, r20
    129e:	55 1f       	adc	r21, r21
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	72 e1       	ldi	r23, 0x12	; 18
    12a4:	8a e7       	ldi	r24, 0x7A	; 122
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divmodsi4>
    12ac:	ba 01       	movw	r22, r20
    12ae:	a9 01       	movw	r20, r18
    12b0:	4f 5f       	subi	r20, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	6f 4f       	sbci	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	db 01       	movw	r26, r22
    12ba:	ca 01       	movw	r24, r20
    12bc:	1a f4       	brpl	.+6      	; 0x12c4 <init_serial_stdio+0x5c>
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	a1 1d       	adc	r26, r1
    12c2:	b1 1d       	adc	r27, r1
    12c4:	b5 95       	asr	r27
    12c6:	a7 95       	ror	r26
    12c8:	97 95       	ror	r25
    12ca:	87 95       	ror	r24
    12cc:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    12ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    12d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    12d6:	e1 ec       	ldi	r30, 0xC1	; 193
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	88 e1       	ldi	r24, 0x18	; 24
    12dc:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    12de:	80 81       	ld	r24, Z
    12e0:	80 68       	ori	r24, 0x80	; 128
    12e2:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    12e4:	ed e7       	ldi	r30, 0x7D	; 125
    12e6:	f2 e0       	ldi	r31, 0x02	; 2
    12e8:	89 e0       	ldi	r24, 0x09	; 9
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	93 83       	std	Z+3, r25	; 0x03
    12ee:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
    12f4:	08 95       	ret

000012f6 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    12f6:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <bytes_in_input_buffer>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	91 11       	cpse	r25, r1
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <serial_input_available+0xc>
    1300:	80 e0       	ldi	r24, 0x00	; 0
}
    1302:	08 95       	ret

00001304 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1304:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <input_insert_pos>
	bytes_in_input_buffer = 0;
    1308:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <bytes_in_input_buffer>
    130c:	08 95       	ret

0000130e <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1322:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
    1326:	88 23       	and	r24, r24
    1328:	29 f1       	breq	.+74     	; 0x1374 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    132a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <out_insert_pos>
    132e:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <bytes_in_out_buffer>
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	82 1b       	sub	r24, r18
    1336:	91 09       	sbc	r25, r1
    1338:	5a f4       	brpl	.+22     	; 0x1350 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    133a:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <out_insert_pos>
    133e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	e8 1b       	sub	r30, r24
    1346:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1348:	e6 59       	subi	r30, 0x96	; 150
    134a:	fd 4f       	sbci	r31, 0xFD	; 253
    134c:	90 81       	ld	r25, Z
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1350:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <out_insert_pos>
    1354:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	e8 1b       	sub	r30, r24
    135c:	f1 09       	sbc	r31, r1
    135e:	e5 59       	subi	r30, 0x95	; 149
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1364:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
    1368:	81 50       	subi	r24, 0x01	; 1
    136a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    136e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1372:	05 c0       	rjmp	.+10     	; 0x137e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1374:	e1 ec       	ldi	r30, 0xC1	; 193
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8f 7d       	andi	r24, 0xDF	; 223
    137c:	80 83       	st	Z, r24
	}
}
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	9f 91       	pop	r25
    1384:	8f 91       	pop	r24
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	cf 93       	push	r28
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    13b6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    13ba:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <do_echo>
    13be:	88 23       	and	r24, r24
    13c0:	49 f0       	breq	.+18     	; 0x13d4 <__vector_20+0x42>
    13c2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <bytes_in_out_buffer>
    13c6:	8f 3f       	cpi	r24, 0xFF	; 255
    13c8:	29 f0       	breq	.+10     	; 0x13d4 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	8c 2f       	mov	r24, r28
    13d0:	0e 94 ce 08 	call	0x119c	; 0x119c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    13d4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <bytes_in_input_buffer>
    13d8:	80 31       	cpi	r24, 0x10	; 16
    13da:	20 f0       	brcs	.+8      	; 0x13e4 <__vector_20+0x52>
		input_overrun = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <input_overrun>
    13e2:	18 c0       	rjmp	.+48     	; 0x1414 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    13e4:	cd 30       	cpi	r28, 0x0D	; 13
    13e6:	09 f4       	brne	.+2      	; 0x13ea <__vector_20+0x58>
			c = '\n';
    13e8:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    13ea:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <input_insert_pos>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	8e 0f       	add	r24, r30
    13f2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <input_insert_pos>
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e5 59       	subi	r30, 0x95	; 149
    13fa:	fd 4f       	sbci	r31, 0xFD	; 253
    13fc:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    13fe:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <bytes_in_input_buffer>
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1408:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <input_insert_pos>
    140c:	80 31       	cpi	r24, 0x10	; 16
    140e:	11 f4       	brne	.+4      	; 0x1414 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1410:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <input_insert_pos>
		}
	}
}
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	cf 91       	pop	r28
    141a:	bf 91       	pop	r27
    141c:	af 91       	pop	r26
    141e:	9f 91       	pop	r25
    1420:	8f 91       	pop	r24
    1422:	7f 91       	pop	r23
    1424:	6f 91       	pop	r22
    1426:	5f 91       	pop	r21
    1428:	4f 91       	pop	r20
    142a:	3f 91       	pop	r19
    142c:	2f 91       	pop	r18
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0
    1434:	1f 90       	pop	r1
    1436:	18 95       	reti

00001438 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1438:	94 b1       	in	r25, 0x04	; 4
    143a:	90 6b       	ori	r25, 0xB0	; 176
    143c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    143e:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1440:	90 e5       	ldi	r25, 0x50	; 80
    1442:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1444:	88 30       	cpi	r24, 0x08	; 8
    1446:	21 f0       	breq	.+8      	; 0x1450 <spi_setup_master+0x18>
    1448:	80 32       	cpi	r24, 0x20	; 32
    144a:	11 f0       	breq	.+4      	; 0x1450 <spi_setup_master+0x18>
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	19 f4       	brne	.+6      	; 0x1456 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	9d bd       	out	0x2d, r25	; 45
			break;
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1456:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1458:	80 32       	cpi	r24, 0x20	; 32
    145a:	69 f0       	breq	.+26     	; 0x1476 <spi_setup_master+0x3e>
    145c:	28 f4       	brcc	.+10     	; 0x1468 <spi_setup_master+0x30>
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	71 f0       	breq	.+28     	; 0x147e <spi_setup_master+0x46>
    1462:	80 31       	cpi	r24, 0x10	; 16
    1464:	61 f0       	breq	.+24     	; 0x147e <spi_setup_master+0x46>
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <spi_setup_master+0x4c>
    1468:	80 34       	cpi	r24, 0x40	; 64
    146a:	29 f0       	breq	.+10     	; 0x1476 <spi_setup_master+0x3e>
    146c:	80 38       	cpi	r24, 0x80	; 128
    146e:	51 f4       	brne	.+20     	; 0x1484 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1470:	8c b5       	in	r24, 0x2c	; 44
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1476:	8c b5       	in	r24, 0x2c	; 44
    1478:	82 60       	ori	r24, 0x02	; 2
    147a:	8c bd       	out	0x2c, r24	; 44
			break;
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    147e:	8c b5       	in	r24, 0x2c	; 44
    1480:	81 60       	ori	r24, 0x01	; 1
    1482:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1484:	2c 98       	cbi	0x05, 4	; 5
    1486:	08 95       	ret

00001488 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1488:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    148a:	0d b4       	in	r0, 0x2d	; 45
    148c:	07 fe       	sbrs	r0, 7
    148e:	fd cf       	rjmp	.-6      	; 0x148a <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1490:	8e b5       	in	r24, 0x2e	; 46
    1492:	08 95       	ret

00001494 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1494:	9f 93       	push	r25
    1496:	8f 93       	push	r24
    1498:	7f 93       	push	r23
    149a:	6f 93       	push	r22
    149c:	8d ed       	ldi	r24, 0xDD	; 221
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	9f 93       	push	r25
    14a2:	8f 93       	push	r24
    14a4:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	08 95       	ret

000014b6 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    14b6:	88 ed       	ldi	r24, 0xD8	; 216
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	0e 94 a4 0c 	call	0x1948	; 0x1948 <printf_P>
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	08 95       	ret

000014c8 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    14c8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <clockTicks>
    14cc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <clockTicks+0x1>
    14d0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <clockTicks+0x2>
    14d4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    14d8:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    14da:	8c e7       	ldi	r24, 0x7C	; 124
    14dc:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    14e6:	ee e6       	ldi	r30, 0x6E	; 110
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    14f0:	85 b3       	in	r24, 0x15	; 21
    14f2:	82 70       	andi	r24, 0x02	; 2
    14f4:	85 bb       	out	0x15, r24	; 21
    14f6:	08 95       	ret

000014f8 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    14f8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    14fa:	f8 94       	cli
	returnValue = clockTicks;
    14fc:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <clockTicks>
    1500:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <clockTicks+0x1>
    1504:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <clockTicks+0x2>
    1508:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <clockTicks+0x3>
	if(interruptsOn) {
    150c:	22 23       	and	r18, r18
    150e:	0c f4       	brge	.+2      	; 0x1512 <get_current_time+0x1a>
		sei();
    1510:	78 94       	sei
	}
	return returnValue;
}
    1512:	08 95       	ret

00001514 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	8f 92       	push	r8
    1520:	9f 92       	push	r9
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
	/* Increment our clock tick count */
	if (isPause == 0) {
    1546:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <isPause>
    154a:	81 11       	cpse	r24, r1
    154c:	13 c0       	rjmp	.+38     	; 0x1574 <__vector_16+0x60>
		clockTicks++;
    154e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <clockTicks>
    1552:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <clockTicks+0x1>
    1556:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <clockTicks+0x2>
    155a:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <clockTicks+0x3>
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	a1 1d       	adc	r26, r1
    1562:	b1 1d       	adc	r27, r1
    1564:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <clockTicks>
    1568:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <clockTicks+0x1>
    156c:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <clockTicks+0x2>
    1570:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <clockTicks+0x3>
	}

	DDRA = 0xFF;
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	81 b9       	out	0x01, r24	; 1
	DDRD = (1<<PORTD5);	
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	8a b9       	out	0x0a, r24	; 10
	int LeftValue = get_score() % 10;
    157c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_score>
    1580:	2a e0       	ldi	r18, 0x0A	; 10
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodsi4>
    158c:	6b 01       	movw	r12, r22
    158e:	7c 01       	movw	r14, r24
	int RightValue = (get_score() / 10) % 10;
    1590:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_score>
    1594:	4b 01       	movw	r8, r22
    1596:	5c 01       	movw	r10, r24
	//while(1) {
	/* Output the current digit */
	if (get_score() < 10) {
    1598:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_score>
    159c:	6a 30       	cpi	r22, 0x0A	; 10
    159e:	71 05       	cpc	r23, r1
    15a0:	81 05       	cpc	r24, r1
    15a2:	91 05       	cpc	r25, r1
    15a4:	38 f4       	brcc	.+14     	; 0x15b4 <__vector_16+0xa0>
		PORTD = (0<<PORTD5);	
    15a6:	1b b8       	out	0x0b, r1	; 11
		PORTA = seven_seg[LeftValue];
    15a8:	f6 01       	movw	r30, r12
    15aa:	e9 5e       	subi	r30, 0xE9	; 233
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	80 81       	ld	r24, Z
    15b0:	82 b9       	out	0x02, r24	; 2
    15b2:	27 c0       	rjmp	.+78     	; 0x1602 <__vector_16+0xee>
	}
	else {
		if(digit == 0) {
    15b4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <digit>
    15b8:	81 11       	cpse	r24, r1
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <__vector_16+0xb8>
			/* Extract the ones place from the timer counter 0 value */
			/* HINT: Consider the modulus (%) operator. */
			PORTA = 0;
    15bc:	12 b8       	out	0x02, r1	; 2
			PORTD = (0<<PORTD5);
    15be:	1b b8       	out	0x0b, r1	; 11
			PORTA = seven_seg[LeftValue];
    15c0:	f6 01       	movw	r30, r12
    15c2:	e9 5e       	subi	r30, 0xE9	; 233
    15c4:	fe 4f       	sbci	r31, 0xFE	; 254
    15c6:	80 81       	ld	r24, Z
    15c8:	82 b9       	out	0x02, r24	; 2
    15ca:	1b c0       	rjmp	.+54     	; 0x1602 <__vector_16+0xee>
		} else {
			/* Extract the tens place from the timer counter 0 */
			PORTA = 0;
    15cc:	12 b8       	out	0x02, r1	; 2
			PORTD = (1<<PORTD5);
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	8b b9       	out	0x0b, r24	; 11
			PORTA = seven_seg[RightValue];
    15d2:	0f 2e       	mov	r0, r31
    15d4:	fa e0       	ldi	r31, 0x0A	; 10
    15d6:	cf 2e       	mov	r12, r31
    15d8:	d1 2c       	mov	r13, r1
    15da:	e1 2c       	mov	r14, r1
    15dc:	f1 2c       	mov	r15, r1
    15de:	f0 2d       	mov	r31, r0
    15e0:	c5 01       	movw	r24, r10
    15e2:	b4 01       	movw	r22, r8
    15e4:	a7 01       	movw	r20, r14
    15e6:	96 01       	movw	r18, r12
    15e8:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodsi4>
    15ec:	ca 01       	movw	r24, r20
    15ee:	b9 01       	movw	r22, r18
    15f0:	a7 01       	movw	r20, r14
    15f2:	96 01       	movw	r18, r12
    15f4:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodsi4>
    15f8:	fb 01       	movw	r30, r22
    15fa:	e9 5e       	subi	r30, 0xE9	; 233
    15fc:	fe 4f       	sbci	r31, 0xFE	; 254
    15fe:	80 81       	ld	r24, Z
    1600:	82 b9       	out	0x02, r24	; 2
		}
	}
	/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
	digit = 1 - digit;
    1602:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <digit>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	89 1b       	sub	r24, r25
    160a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <digit>

	//}
}
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <pause_clock>:

void pause_clock() {
	isPause = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <isPause>
    1646:	08 95       	ret

00001648 <unpause_clock>:
}

void unpause_clock() {
	isPause = 0;
    1648:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <isPause>
    164c:	08 95       	ret

0000164e <__udivmodsi4>:
    164e:	a1 e2       	ldi	r26, 0x21	; 33
    1650:	1a 2e       	mov	r1, r26
    1652:	aa 1b       	sub	r26, r26
    1654:	bb 1b       	sub	r27, r27
    1656:	fd 01       	movw	r30, r26
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <__udivmodsi4_ep>

0000165a <__udivmodsi4_loop>:
    165a:	aa 1f       	adc	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	ee 1f       	adc	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	a2 17       	cp	r26, r18
    1664:	b3 07       	cpc	r27, r19
    1666:	e4 07       	cpc	r30, r20
    1668:	f5 07       	cpc	r31, r21
    166a:	20 f0       	brcs	.+8      	; 0x1674 <__udivmodsi4_ep>
    166c:	a2 1b       	sub	r26, r18
    166e:	b3 0b       	sbc	r27, r19
    1670:	e4 0b       	sbc	r30, r20
    1672:	f5 0b       	sbc	r31, r21

00001674 <__udivmodsi4_ep>:
    1674:	66 1f       	adc	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	1a 94       	dec	r1
    167e:	69 f7       	brne	.-38     	; 0x165a <__udivmodsi4_loop>
    1680:	60 95       	com	r22
    1682:	70 95       	com	r23
    1684:	80 95       	com	r24
    1686:	90 95       	com	r25
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	bd 01       	movw	r22, r26
    168e:	cf 01       	movw	r24, r30
    1690:	08 95       	ret

00001692 <__divmodsi4>:
    1692:	05 2e       	mov	r0, r21
    1694:	97 fb       	bst	r25, 7
    1696:	1e f4       	brtc	.+6      	; 0x169e <__divmodsi4+0xc>
    1698:	00 94       	com	r0
    169a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__negsi2>
    169e:	57 fd       	sbrc	r21, 7
    16a0:	07 d0       	rcall	.+14     	; 0x16b0 <__divmodsi4_neg2>
    16a2:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodsi4>
    16a6:	07 fc       	sbrc	r0, 7
    16a8:	03 d0       	rcall	.+6      	; 0x16b0 <__divmodsi4_neg2>
    16aa:	4e f4       	brtc	.+18     	; 0x16be <__divmodsi4_exit>
    16ac:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__negsi2>

000016b0 <__divmodsi4_neg2>:
    16b0:	50 95       	com	r21
    16b2:	40 95       	com	r20
    16b4:	30 95       	com	r19
    16b6:	21 95       	neg	r18
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	4f 4f       	sbci	r20, 0xFF	; 255
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255

000016be <__divmodsi4_exit>:
    16be:	08 95       	ret

000016c0 <__negsi2>:
    16c0:	90 95       	com	r25
    16c2:	80 95       	com	r24
    16c4:	70 95       	com	r23
    16c6:	61 95       	neg	r22
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	08 95       	ret

000016d0 <do_rand>:
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
    16e6:	68 81       	ld	r22, Y
    16e8:	79 81       	ldd	r23, Y+1	; 0x01
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	61 15       	cp	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	81 05       	cpc	r24, r1
    16f4:	91 05       	cpc	r25, r1
    16f6:	21 f4       	brne	.+8      	; 0x1700 <do_rand+0x30>
    16f8:	64 e2       	ldi	r22, 0x24	; 36
    16fa:	79 ed       	ldi	r23, 0xD9	; 217
    16fc:	8b e5       	ldi	r24, 0x5B	; 91
    16fe:	97 e0       	ldi	r25, 0x07	; 7
    1700:	2d e1       	ldi	r18, 0x1D	; 29
    1702:	33 ef       	ldi	r19, 0xF3	; 243
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divmodsi4>
    170c:	49 01       	movw	r8, r18
    170e:	5a 01       	movw	r10, r20
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	a7 ea       	ldi	r26, 0xA7	; 167
    1716:	b1 e4       	ldi	r27, 0x41	; 65
    1718:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__muluhisi3>
    171c:	6b 01       	movw	r12, r22
    171e:	7c 01       	movw	r14, r24
    1720:	ac ee       	ldi	r26, 0xEC	; 236
    1722:	b4 ef       	ldi	r27, 0xF4	; 244
    1724:	a5 01       	movw	r20, r10
    1726:	94 01       	movw	r18, r8
    1728:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulohisi3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8c 0d       	add	r24, r12
    1732:	9d 1d       	adc	r25, r13
    1734:	ae 1d       	adc	r26, r14
    1736:	bf 1d       	adc	r27, r15
    1738:	b7 ff       	sbrs	r27, 7
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <do_rand+0x72>
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	a1 09       	sbc	r26, r1
    1740:	b0 48       	sbci	r27, 0x80	; 128
    1742:	88 83       	st	Y, r24
    1744:	99 83       	std	Y+1, r25	; 0x01
    1746:	aa 83       	std	Y+2, r26	; 0x02
    1748:	bb 83       	std	Y+3, r27	; 0x03
    174a:	9f 77       	andi	r25, 0x7F	; 127
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	df 90       	pop	r13
    1756:	cf 90       	pop	r12
    1758:	bf 90       	pop	r11
    175a:	af 90       	pop	r10
    175c:	9f 90       	pop	r9
    175e:	8f 90       	pop	r8
    1760:	08 95       	ret

00001762 <rand_r>:
    1762:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <do_rand>
    1766:	08 95       	ret

00001768 <rand>:
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <do_rand>
    1770:	08 95       	ret

00001772 <srand>:
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    177a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    177e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1782:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1786:	08 95       	ret

00001788 <random_r>:
    1788:	8f 92       	push	r8
    178a:	9f 92       	push	r9
    178c:	af 92       	push	r10
    178e:	bf 92       	push	r11
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	ec 01       	movw	r28, r24
    179e:	68 81       	ld	r22, Y
    17a0:	79 81       	ldd	r23, Y+1	; 0x01
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	9b 81       	ldd	r25, Y+3	; 0x03
    17a6:	61 15       	cp	r22, r1
    17a8:	71 05       	cpc	r23, r1
    17aa:	81 05       	cpc	r24, r1
    17ac:	91 05       	cpc	r25, r1
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <random_r+0x30>
    17b0:	64 e2       	ldi	r22, 0x24	; 36
    17b2:	79 ed       	ldi	r23, 0xD9	; 217
    17b4:	8b e5       	ldi	r24, 0x5B	; 91
    17b6:	97 e0       	ldi	r25, 0x07	; 7
    17b8:	2d e1       	ldi	r18, 0x1D	; 29
    17ba:	33 ef       	ldi	r19, 0xF3	; 243
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divmodsi4>
    17c4:	49 01       	movw	r8, r18
    17c6:	5a 01       	movw	r10, r20
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	a7 ea       	ldi	r26, 0xA7	; 167
    17ce:	b1 e4       	ldi	r27, 0x41	; 65
    17d0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__muluhisi3>
    17d4:	6b 01       	movw	r12, r22
    17d6:	7c 01       	movw	r14, r24
    17d8:	ac ee       	ldi	r26, 0xEC	; 236
    17da:	b4 ef       	ldi	r27, 0xF4	; 244
    17dc:	a5 01       	movw	r20, r10
    17de:	94 01       	movw	r18, r8
    17e0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulohisi3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8c 0d       	add	r24, r12
    17ea:	9d 1d       	adc	r25, r13
    17ec:	ae 1d       	adc	r26, r14
    17ee:	bf 1d       	adc	r27, r15
    17f0:	b7 ff       	sbrs	r27, 7
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <random_r+0x72>
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	a1 09       	sbc	r26, r1
    17f8:	b0 48       	sbci	r27, 0x80	; 128
    17fa:	88 83       	st	Y, r24
    17fc:	99 83       	std	Y+1, r25	; 0x01
    17fe:	aa 83       	std	Y+2, r26	; 0x02
    1800:	bb 83       	std	Y+3, r27	; 0x03
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	9f 77       	andi	r25, 0x7F	; 127
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	9f 90       	pop	r9
    181a:	8f 90       	pop	r8
    181c:	08 95       	ret

0000181e <random>:
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    1832:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    1836:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    183a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    183e:	61 15       	cp	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	81 05       	cpc	r24, r1
    1844:	91 05       	cpc	r25, r1
    1846:	21 f4       	brne	.+8      	; 0x1850 <random+0x32>
    1848:	64 e2       	ldi	r22, 0x24	; 36
    184a:	79 ed       	ldi	r23, 0xD9	; 217
    184c:	8b e5       	ldi	r24, 0x5B	; 91
    184e:	97 e0       	ldi	r25, 0x07	; 7
    1850:	2d e1       	ldi	r18, 0x1D	; 29
    1852:	33 ef       	ldi	r19, 0xF3	; 243
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divmodsi4>
    185c:	49 01       	movw	r8, r18
    185e:	5a 01       	movw	r10, r20
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	a7 ea       	ldi	r26, 0xA7	; 167
    1866:	b1 e4       	ldi	r27, 0x41	; 65
    1868:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__muluhisi3>
    186c:	6b 01       	movw	r12, r22
    186e:	7c 01       	movw	r14, r24
    1870:	ac ee       	ldi	r26, 0xEC	; 236
    1872:	b4 ef       	ldi	r27, 0xF4	; 244
    1874:	a5 01       	movw	r20, r10
    1876:	94 01       	movw	r18, r8
    1878:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulohisi3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8c 0d       	add	r24, r12
    1882:	9d 1d       	adc	r25, r13
    1884:	ae 1d       	adc	r26, r14
    1886:	bf 1d       	adc	r27, r15
    1888:	b7 ff       	sbrs	r27, 7
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <random+0x74>
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	a1 09       	sbc	r26, r1
    1890:	b0 48       	sbci	r27, 0x80	; 128
    1892:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    1896:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    189a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    189e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	9f 77       	andi	r25, 0x7F	; 127
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	bf 90       	pop	r11
    18b2:	af 90       	pop	r10
    18b4:	9f 90       	pop	r9
    18b6:	8f 90       	pop	r8
    18b8:	08 95       	ret

000018ba <srandom>:
    18ba:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    18be:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    18c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    18c6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    18ca:	08 95       	ret

000018cc <fgetc>:
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	ec 01       	movw	r28, r24
    18d2:	2b 81       	ldd	r18, Y+3	; 0x03
    18d4:	20 ff       	sbrs	r18, 0
    18d6:	33 c0       	rjmp	.+102    	; 0x193e <fgetc+0x72>
    18d8:	26 ff       	sbrs	r18, 6
    18da:	0a c0       	rjmp	.+20     	; 0x18f0 <fgetc+0x24>
    18dc:	2f 7b       	andi	r18, 0xBF	; 191
    18de:	2b 83       	std	Y+3, r18	; 0x03
    18e0:	8e 81       	ldd	r24, Y+6	; 0x06
    18e2:	9f 81       	ldd	r25, Y+7	; 0x07
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	9f 83       	std	Y+7, r25	; 0x07
    18e8:	8e 83       	std	Y+6, r24	; 0x06
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	29 c0       	rjmp	.+82     	; 0x1942 <fgetc+0x76>
    18f0:	22 ff       	sbrs	r18, 2
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <fgetc+0x46>
    18f4:	e8 81       	ld	r30, Y
    18f6:	f9 81       	ldd	r31, Y+1	; 0x01
    18f8:	80 81       	ld	r24, Z
    18fa:	08 2e       	mov	r0, r24
    18fc:	00 0c       	add	r0, r0
    18fe:	99 0b       	sbc	r25, r25
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	19 f4       	brne	.+6      	; 0x190a <fgetc+0x3e>
    1904:	20 62       	ori	r18, 0x20	; 32
    1906:	2b 83       	std	Y+3, r18	; 0x03
    1908:	1a c0       	rjmp	.+52     	; 0x193e <fgetc+0x72>
    190a:	31 96       	adiw	r30, 0x01	; 1
    190c:	f9 83       	std	Y+1, r31	; 0x01
    190e:	e8 83       	st	Y, r30
    1910:	0e c0       	rjmp	.+28     	; 0x192e <fgetc+0x62>
    1912:	ea 85       	ldd	r30, Y+10	; 0x0a
    1914:	fb 85       	ldd	r31, Y+11	; 0x0b
    1916:	09 95       	icall
    1918:	97 ff       	sbrs	r25, 7
    191a:	09 c0       	rjmp	.+18     	; 0x192e <fgetc+0x62>
    191c:	2b 81       	ldd	r18, Y+3	; 0x03
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	11 f0       	breq	.+4      	; 0x1926 <fgetc+0x5a>
    1922:	80 e2       	ldi	r24, 0x20	; 32
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <fgetc+0x5c>
    1926:	80 e1       	ldi	r24, 0x10	; 16
    1928:	82 2b       	or	r24, r18
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	08 c0       	rjmp	.+16     	; 0x193e <fgetc+0x72>
    192e:	2e 81       	ldd	r18, Y+6	; 0x06
    1930:	3f 81       	ldd	r19, Y+7	; 0x07
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	3f 83       	std	Y+7, r19	; 0x07
    1938:	2e 83       	std	Y+6, r18	; 0x06
    193a:	99 27       	eor	r25, r25
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <fgetc+0x76>
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	9f ef       	ldi	r25, 0xFF	; 255
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <printf_P>:
    1948:	a0 e0       	ldi	r26, 0x00	; 0
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ea ea       	ldi	r30, 0xAA	; 170
    194e:	fc e0       	ldi	r31, 0x0C	; 12
    1950:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__prologue_saves__+0x1c>
    1954:	ae 01       	movw	r20, r28
    1956:	49 5f       	subi	r20, 0xF9	; 249
    1958:	5f 4f       	sbci	r21, 0xFF	; 255
    195a:	da 01       	movw	r26, r20
    195c:	6d 91       	ld	r22, X+
    195e:	7d 91       	ld	r23, X+
    1960:	ad 01       	movw	r20, r26
    1962:	0d e7       	ldi	r16, 0x7D	; 125
    1964:	12 e0       	ldi	r17, 0x02	; 2
    1966:	f8 01       	movw	r30, r16
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	dc 01       	movw	r26, r24
    196e:	13 96       	adiw	r26, 0x03	; 3
    1970:	2c 91       	ld	r18, X
    1972:	13 97       	sbiw	r26, 0x03	; 3
    1974:	28 60       	ori	r18, 0x08	; 8
    1976:	13 96       	adiw	r26, 0x03	; 3
    1978:	2c 93       	st	X, r18
    197a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <vfprintf>
    197e:	d8 01       	movw	r26, r16
    1980:	12 96       	adiw	r26, 0x02	; 2
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	13 97       	sbiw	r26, 0x03	; 3
    1988:	23 81       	ldd	r18, Z+3	; 0x03
    198a:	27 7f       	andi	r18, 0xF7	; 247
    198c:	23 83       	std	Z+3, r18	; 0x03
    198e:	e4 e0       	ldi	r30, 0x04	; 4
    1990:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__epilogue_restores__+0x1c>

00001994 <vfprintf>:
    1994:	ab e0       	ldi	r26, 0x0B	; 11
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e0 ed       	ldi	r30, 0xD0	; 208
    199a:	fc e0       	ldi	r31, 0x0C	; 12
    199c:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__prologue_saves__>
    19a0:	6c 01       	movw	r12, r24
    19a2:	7b 01       	movw	r14, r22
    19a4:	8a 01       	movw	r16, r20
    19a6:	fc 01       	movw	r30, r24
    19a8:	17 82       	std	Z+7, r1	; 0x07
    19aa:	16 82       	std	Z+6, r1	; 0x06
    19ac:	83 81       	ldd	r24, Z+3	; 0x03
    19ae:	81 ff       	sbrs	r24, 1
    19b0:	cc c1       	rjmp	.+920    	; 0x1d4a <vfprintf+0x3b6>
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	3c 01       	movw	r6, r24
    19b8:	f6 01       	movw	r30, r12
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	f7 01       	movw	r30, r14
    19be:	93 fd       	sbrc	r25, 3
    19c0:	85 91       	lpm	r24, Z+
    19c2:	93 ff       	sbrs	r25, 3
    19c4:	81 91       	ld	r24, Z+
    19c6:	7f 01       	movw	r14, r30
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <vfprintf+0x3a>
    19cc:	ba c1       	rjmp	.+884    	; 0x1d42 <vfprintf+0x3ae>
    19ce:	85 32       	cpi	r24, 0x25	; 37
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <vfprintf+0x4c>
    19d2:	93 fd       	sbrc	r25, 3
    19d4:	85 91       	lpm	r24, Z+
    19d6:	93 ff       	sbrs	r25, 3
    19d8:	81 91       	ld	r24, Z+
    19da:	7f 01       	movw	r14, r30
    19dc:	85 32       	cpi	r24, 0x25	; 37
    19de:	29 f4       	brne	.+10     	; 0x19ea <vfprintf+0x56>
    19e0:	b6 01       	movw	r22, r12
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    19e8:	e7 cf       	rjmp	.-50     	; 0x19b8 <vfprintf+0x24>
    19ea:	91 2c       	mov	r9, r1
    19ec:	21 2c       	mov	r2, r1
    19ee:	31 2c       	mov	r3, r1
    19f0:	ff e1       	ldi	r31, 0x1F	; 31
    19f2:	f3 15       	cp	r31, r3
    19f4:	d8 f0       	brcs	.+54     	; 0x1a2c <vfprintf+0x98>
    19f6:	8b 32       	cpi	r24, 0x2B	; 43
    19f8:	79 f0       	breq	.+30     	; 0x1a18 <vfprintf+0x84>
    19fa:	38 f4       	brcc	.+14     	; 0x1a0a <vfprintf+0x76>
    19fc:	80 32       	cpi	r24, 0x20	; 32
    19fe:	79 f0       	breq	.+30     	; 0x1a1e <vfprintf+0x8a>
    1a00:	83 32       	cpi	r24, 0x23	; 35
    1a02:	a1 f4       	brne	.+40     	; 0x1a2c <vfprintf+0x98>
    1a04:	23 2d       	mov	r18, r3
    1a06:	20 61       	ori	r18, 0x10	; 16
    1a08:	1d c0       	rjmp	.+58     	; 0x1a44 <vfprintf+0xb0>
    1a0a:	8d 32       	cpi	r24, 0x2D	; 45
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <vfprintf+0x92>
    1a0e:	80 33       	cpi	r24, 0x30	; 48
    1a10:	69 f4       	brne	.+26     	; 0x1a2c <vfprintf+0x98>
    1a12:	23 2d       	mov	r18, r3
    1a14:	21 60       	ori	r18, 0x01	; 1
    1a16:	16 c0       	rjmp	.+44     	; 0x1a44 <vfprintf+0xb0>
    1a18:	83 2d       	mov	r24, r3
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	38 2e       	mov	r3, r24
    1a1e:	e3 2d       	mov	r30, r3
    1a20:	e4 60       	ori	r30, 0x04	; 4
    1a22:	3e 2e       	mov	r3, r30
    1a24:	2a c0       	rjmp	.+84     	; 0x1a7a <vfprintf+0xe6>
    1a26:	f3 2d       	mov	r31, r3
    1a28:	f8 60       	ori	r31, 0x08	; 8
    1a2a:	1d c0       	rjmp	.+58     	; 0x1a66 <vfprintf+0xd2>
    1a2c:	37 fc       	sbrc	r3, 7
    1a2e:	2d c0       	rjmp	.+90     	; 0x1a8a <vfprintf+0xf6>
    1a30:	20 ed       	ldi	r18, 0xD0	; 208
    1a32:	28 0f       	add	r18, r24
    1a34:	2a 30       	cpi	r18, 0x0A	; 10
    1a36:	40 f0       	brcs	.+16     	; 0x1a48 <vfprintf+0xb4>
    1a38:	8e 32       	cpi	r24, 0x2E	; 46
    1a3a:	b9 f4       	brne	.+46     	; 0x1a6a <vfprintf+0xd6>
    1a3c:	36 fc       	sbrc	r3, 6
    1a3e:	81 c1       	rjmp	.+770    	; 0x1d42 <vfprintf+0x3ae>
    1a40:	23 2d       	mov	r18, r3
    1a42:	20 64       	ori	r18, 0x40	; 64
    1a44:	32 2e       	mov	r3, r18
    1a46:	19 c0       	rjmp	.+50     	; 0x1a7a <vfprintf+0xe6>
    1a48:	36 fe       	sbrs	r3, 6
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <vfprintf+0xc4>
    1a4c:	8a e0       	ldi	r24, 0x0A	; 10
    1a4e:	98 9e       	mul	r9, r24
    1a50:	20 0d       	add	r18, r0
    1a52:	11 24       	eor	r1, r1
    1a54:	92 2e       	mov	r9, r18
    1a56:	11 c0       	rjmp	.+34     	; 0x1a7a <vfprintf+0xe6>
    1a58:	ea e0       	ldi	r30, 0x0A	; 10
    1a5a:	2e 9e       	mul	r2, r30
    1a5c:	20 0d       	add	r18, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	22 2e       	mov	r2, r18
    1a62:	f3 2d       	mov	r31, r3
    1a64:	f0 62       	ori	r31, 0x20	; 32
    1a66:	3f 2e       	mov	r3, r31
    1a68:	08 c0       	rjmp	.+16     	; 0x1a7a <vfprintf+0xe6>
    1a6a:	8c 36       	cpi	r24, 0x6C	; 108
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <vfprintf+0xe2>
    1a6e:	83 2d       	mov	r24, r3
    1a70:	80 68       	ori	r24, 0x80	; 128
    1a72:	38 2e       	mov	r3, r24
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <vfprintf+0xe6>
    1a76:	88 36       	cpi	r24, 0x68	; 104
    1a78:	41 f4       	brne	.+16     	; 0x1a8a <vfprintf+0xf6>
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	93 fd       	sbrc	r25, 3
    1a7e:	85 91       	lpm	r24, Z+
    1a80:	93 ff       	sbrs	r25, 3
    1a82:	81 91       	ld	r24, Z+
    1a84:	7f 01       	movw	r14, r30
    1a86:	81 11       	cpse	r24, r1
    1a88:	b3 cf       	rjmp	.-154    	; 0x19f0 <vfprintf+0x5c>
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	9f 7d       	andi	r25, 0xDF	; 223
    1a8e:	95 54       	subi	r25, 0x45	; 69
    1a90:	93 30       	cpi	r25, 0x03	; 3
    1a92:	28 f4       	brcc	.+10     	; 0x1a9e <vfprintf+0x10a>
    1a94:	0c 5f       	subi	r16, 0xFC	; 252
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	9f e3       	ldi	r25, 0x3F	; 63
    1a9a:	99 83       	std	Y+1, r25	; 0x01
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <vfprintf+0x124>
    1a9e:	83 36       	cpi	r24, 0x63	; 99
    1aa0:	31 f0       	breq	.+12     	; 0x1aae <vfprintf+0x11a>
    1aa2:	83 37       	cpi	r24, 0x73	; 115
    1aa4:	71 f0       	breq	.+28     	; 0x1ac2 <vfprintf+0x12e>
    1aa6:	83 35       	cpi	r24, 0x53	; 83
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <vfprintf+0x118>
    1aaa:	59 c0       	rjmp	.+178    	; 0x1b5e <vfprintf+0x1ca>
    1aac:	21 c0       	rjmp	.+66     	; 0x1af0 <vfprintf+0x15c>
    1aae:	f8 01       	movw	r30, r16
    1ab0:	80 81       	ld	r24, Z
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	0e 5f       	subi	r16, 0xFE	; 254
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	88 24       	eor	r8, r8
    1aba:	83 94       	inc	r8
    1abc:	91 2c       	mov	r9, r1
    1abe:	53 01       	movw	r10, r6
    1ac0:	13 c0       	rjmp	.+38     	; 0x1ae8 <vfprintf+0x154>
    1ac2:	28 01       	movw	r4, r16
    1ac4:	f2 e0       	ldi	r31, 0x02	; 2
    1ac6:	4f 0e       	add	r4, r31
    1ac8:	51 1c       	adc	r5, r1
    1aca:	f8 01       	movw	r30, r16
    1acc:	a0 80       	ld	r10, Z
    1ace:	b1 80       	ldd	r11, Z+1	; 0x01
    1ad0:	36 fe       	sbrs	r3, 6
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <vfprintf+0x146>
    1ad4:	69 2d       	mov	r22, r9
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <vfprintf+0x14a>
    1ada:	6f ef       	ldi	r22, 0xFF	; 255
    1adc:	7f ef       	ldi	r23, 0xFF	; 255
    1ade:	c5 01       	movw	r24, r10
    1ae0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <strnlen>
    1ae4:	4c 01       	movw	r8, r24
    1ae6:	82 01       	movw	r16, r4
    1ae8:	f3 2d       	mov	r31, r3
    1aea:	ff 77       	andi	r31, 0x7F	; 127
    1aec:	3f 2e       	mov	r3, r31
    1aee:	16 c0       	rjmp	.+44     	; 0x1b1c <vfprintf+0x188>
    1af0:	28 01       	movw	r4, r16
    1af2:	22 e0       	ldi	r18, 0x02	; 2
    1af4:	42 0e       	add	r4, r18
    1af6:	51 1c       	adc	r5, r1
    1af8:	f8 01       	movw	r30, r16
    1afa:	a0 80       	ld	r10, Z
    1afc:	b1 80       	ldd	r11, Z+1	; 0x01
    1afe:	36 fe       	sbrs	r3, 6
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <vfprintf+0x174>
    1b02:	69 2d       	mov	r22, r9
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <vfprintf+0x178>
    1b08:	6f ef       	ldi	r22, 0xFF	; 255
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <strnlen_P>
    1b12:	4c 01       	movw	r8, r24
    1b14:	f3 2d       	mov	r31, r3
    1b16:	f0 68       	ori	r31, 0x80	; 128
    1b18:	3f 2e       	mov	r3, r31
    1b1a:	82 01       	movw	r16, r4
    1b1c:	33 fc       	sbrc	r3, 3
    1b1e:	1b c0       	rjmp	.+54     	; 0x1b56 <vfprintf+0x1c2>
    1b20:	82 2d       	mov	r24, r2
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	88 16       	cp	r8, r24
    1b26:	99 06       	cpc	r9, r25
    1b28:	b0 f4       	brcc	.+44     	; 0x1b56 <vfprintf+0x1c2>
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	80 e2       	ldi	r24, 0x20	; 32
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1b34:	2a 94       	dec	r2
    1b36:	f4 cf       	rjmp	.-24     	; 0x1b20 <vfprintf+0x18c>
    1b38:	f5 01       	movw	r30, r10
    1b3a:	37 fc       	sbrc	r3, 7
    1b3c:	85 91       	lpm	r24, Z+
    1b3e:	37 fe       	sbrs	r3, 7
    1b40:	81 91       	ld	r24, Z+
    1b42:	5f 01       	movw	r10, r30
    1b44:	b6 01       	movw	r22, r12
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1b4c:	21 10       	cpse	r2, r1
    1b4e:	2a 94       	dec	r2
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	82 1a       	sub	r8, r18
    1b54:	91 08       	sbc	r9, r1
    1b56:	81 14       	cp	r8, r1
    1b58:	91 04       	cpc	r9, r1
    1b5a:	71 f7       	brne	.-36     	; 0x1b38 <vfprintf+0x1a4>
    1b5c:	e8 c0       	rjmp	.+464    	; 0x1d2e <vfprintf+0x39a>
    1b5e:	84 36       	cpi	r24, 0x64	; 100
    1b60:	11 f0       	breq	.+4      	; 0x1b66 <vfprintf+0x1d2>
    1b62:	89 36       	cpi	r24, 0x69	; 105
    1b64:	41 f5       	brne	.+80     	; 0x1bb6 <vfprintf+0x222>
    1b66:	f8 01       	movw	r30, r16
    1b68:	37 fe       	sbrs	r3, 7
    1b6a:	07 c0       	rjmp	.+14     	; 0x1b7a <vfprintf+0x1e6>
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	0c 5f       	subi	r16, 0xFC	; 252
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	08 c0       	rjmp	.+16     	; 0x1b8a <vfprintf+0x1f6>
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	07 2e       	mov	r0, r23
    1b80:	00 0c       	add	r0, r0
    1b82:	88 0b       	sbc	r24, r24
    1b84:	99 0b       	sbc	r25, r25
    1b86:	0e 5f       	subi	r16, 0xFE	; 254
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	f3 2d       	mov	r31, r3
    1b8c:	ff 76       	andi	r31, 0x6F	; 111
    1b8e:	3f 2e       	mov	r3, r31
    1b90:	97 ff       	sbrs	r25, 7
    1b92:	09 c0       	rjmp	.+18     	; 0x1ba6 <vfprintf+0x212>
    1b94:	90 95       	com	r25
    1b96:	80 95       	com	r24
    1b98:	70 95       	com	r23
    1b9a:	61 95       	neg	r22
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	f0 68       	ori	r31, 0x80	; 128
    1ba4:	3f 2e       	mov	r3, r31
    1ba6:	2a e0       	ldi	r18, 0x0A	; 10
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	a3 01       	movw	r20, r6
    1bac:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ultoa_invert>
    1bb0:	88 2e       	mov	r8, r24
    1bb2:	86 18       	sub	r8, r6
    1bb4:	45 c0       	rjmp	.+138    	; 0x1c40 <vfprintf+0x2ac>
    1bb6:	85 37       	cpi	r24, 0x75	; 117
    1bb8:	31 f4       	brne	.+12     	; 0x1bc6 <vfprintf+0x232>
    1bba:	23 2d       	mov	r18, r3
    1bbc:	2f 7e       	andi	r18, 0xEF	; 239
    1bbe:	b2 2e       	mov	r11, r18
    1bc0:	2a e0       	ldi	r18, 0x0A	; 10
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	25 c0       	rjmp	.+74     	; 0x1c10 <vfprintf+0x27c>
    1bc6:	93 2d       	mov	r25, r3
    1bc8:	99 7f       	andi	r25, 0xF9	; 249
    1bca:	b9 2e       	mov	r11, r25
    1bcc:	8f 36       	cpi	r24, 0x6F	; 111
    1bce:	c1 f0       	breq	.+48     	; 0x1c00 <vfprintf+0x26c>
    1bd0:	18 f4       	brcc	.+6      	; 0x1bd8 <vfprintf+0x244>
    1bd2:	88 35       	cpi	r24, 0x58	; 88
    1bd4:	79 f0       	breq	.+30     	; 0x1bf4 <vfprintf+0x260>
    1bd6:	b5 c0       	rjmp	.+362    	; 0x1d42 <vfprintf+0x3ae>
    1bd8:	80 37       	cpi	r24, 0x70	; 112
    1bda:	19 f0       	breq	.+6      	; 0x1be2 <vfprintf+0x24e>
    1bdc:	88 37       	cpi	r24, 0x78	; 120
    1bde:	21 f0       	breq	.+8      	; 0x1be8 <vfprintf+0x254>
    1be0:	b0 c0       	rjmp	.+352    	; 0x1d42 <vfprintf+0x3ae>
    1be2:	e9 2f       	mov	r30, r25
    1be4:	e0 61       	ori	r30, 0x10	; 16
    1be6:	be 2e       	mov	r11, r30
    1be8:	b4 fe       	sbrs	r11, 4
    1bea:	0d c0       	rjmp	.+26     	; 0x1c06 <vfprintf+0x272>
    1bec:	fb 2d       	mov	r31, r11
    1bee:	f4 60       	ori	r31, 0x04	; 4
    1bf0:	bf 2e       	mov	r11, r31
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <vfprintf+0x272>
    1bf4:	34 fe       	sbrs	r3, 4
    1bf6:	0a c0       	rjmp	.+20     	; 0x1c0c <vfprintf+0x278>
    1bf8:	29 2f       	mov	r18, r25
    1bfa:	26 60       	ori	r18, 0x06	; 6
    1bfc:	b2 2e       	mov	r11, r18
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <vfprintf+0x278>
    1c00:	28 e0       	ldi	r18, 0x08	; 8
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <vfprintf+0x27c>
    1c06:	20 e1       	ldi	r18, 0x10	; 16
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x27c>
    1c0c:	20 e1       	ldi	r18, 0x10	; 16
    1c0e:	32 e0       	ldi	r19, 0x02	; 2
    1c10:	f8 01       	movw	r30, r16
    1c12:	b7 fe       	sbrs	r11, 7
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <vfprintf+0x290>
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	0c 5f       	subi	r16, 0xFC	; 252
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0x29c>
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 5f       	subi	r16, 0xFE	; 254
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	a3 01       	movw	r20, r6
    1c32:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ultoa_invert>
    1c36:	88 2e       	mov	r8, r24
    1c38:	86 18       	sub	r8, r6
    1c3a:	fb 2d       	mov	r31, r11
    1c3c:	ff 77       	andi	r31, 0x7F	; 127
    1c3e:	3f 2e       	mov	r3, r31
    1c40:	36 fe       	sbrs	r3, 6
    1c42:	0d c0       	rjmp	.+26     	; 0x1c5e <vfprintf+0x2ca>
    1c44:	23 2d       	mov	r18, r3
    1c46:	2e 7f       	andi	r18, 0xFE	; 254
    1c48:	a2 2e       	mov	r10, r18
    1c4a:	89 14       	cp	r8, r9
    1c4c:	58 f4       	brcc	.+22     	; 0x1c64 <vfprintf+0x2d0>
    1c4e:	34 fe       	sbrs	r3, 4
    1c50:	0b c0       	rjmp	.+22     	; 0x1c68 <vfprintf+0x2d4>
    1c52:	32 fc       	sbrc	r3, 2
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <vfprintf+0x2d4>
    1c56:	83 2d       	mov	r24, r3
    1c58:	8e 7e       	andi	r24, 0xEE	; 238
    1c5a:	a8 2e       	mov	r10, r24
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <vfprintf+0x2d4>
    1c5e:	b8 2c       	mov	r11, r8
    1c60:	a3 2c       	mov	r10, r3
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <vfprintf+0x2d6>
    1c64:	b8 2c       	mov	r11, r8
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <vfprintf+0x2d6>
    1c68:	b9 2c       	mov	r11, r9
    1c6a:	a4 fe       	sbrs	r10, 4
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <vfprintf+0x2f8>
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e8 0d       	add	r30, r8
    1c72:	f1 1d       	adc	r31, r1
    1c74:	80 81       	ld	r24, Z
    1c76:	80 33       	cpi	r24, 0x30	; 48
    1c78:	21 f4       	brne	.+8      	; 0x1c82 <vfprintf+0x2ee>
    1c7a:	9a 2d       	mov	r25, r10
    1c7c:	99 7e       	andi	r25, 0xE9	; 233
    1c7e:	a9 2e       	mov	r10, r25
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <vfprintf+0x300>
    1c82:	a2 fe       	sbrs	r10, 2
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <vfprintf+0x2fe>
    1c86:	b3 94       	inc	r11
    1c88:	b3 94       	inc	r11
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <vfprintf+0x300>
    1c8c:	8a 2d       	mov	r24, r10
    1c8e:	86 78       	andi	r24, 0x86	; 134
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <vfprintf+0x300>
    1c92:	b3 94       	inc	r11
    1c94:	a3 fc       	sbrc	r10, 3
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <vfprintf+0x326>
    1c98:	a0 fe       	sbrs	r10, 0
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <vfprintf+0x314>
    1c9c:	b2 14       	cp	r11, r2
    1c9e:	88 f4       	brcc	.+34     	; 0x1cc2 <vfprintf+0x32e>
    1ca0:	28 0c       	add	r2, r8
    1ca2:	92 2c       	mov	r9, r2
    1ca4:	9b 18       	sub	r9, r11
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <vfprintf+0x330>
    1ca8:	b2 14       	cp	r11, r2
    1caa:	60 f4       	brcc	.+24     	; 0x1cc4 <vfprintf+0x330>
    1cac:	b6 01       	movw	r22, r12
    1cae:	80 e2       	ldi	r24, 0x20	; 32
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1cb6:	b3 94       	inc	r11
    1cb8:	f7 cf       	rjmp	.-18     	; 0x1ca8 <vfprintf+0x314>
    1cba:	b2 14       	cp	r11, r2
    1cbc:	18 f4       	brcc	.+6      	; 0x1cc4 <vfprintf+0x330>
    1cbe:	2b 18       	sub	r2, r11
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <vfprintf+0x332>
    1cc2:	98 2c       	mov	r9, r8
    1cc4:	21 2c       	mov	r2, r1
    1cc6:	a4 fe       	sbrs	r10, 4
    1cc8:	10 c0       	rjmp	.+32     	; 0x1cea <vfprintf+0x356>
    1cca:	b6 01       	movw	r22, r12
    1ccc:	80 e3       	ldi	r24, 0x30	; 48
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1cd4:	a2 fe       	sbrs	r10, 2
    1cd6:	17 c0       	rjmp	.+46     	; 0x1d06 <vfprintf+0x372>
    1cd8:	a1 fc       	sbrc	r10, 1
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <vfprintf+0x34e>
    1cdc:	88 e7       	ldi	r24, 0x78	; 120
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0x352>
    1ce2:	88 e5       	ldi	r24, 0x58	; 88
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	0c c0       	rjmp	.+24     	; 0x1d02 <vfprintf+0x36e>
    1cea:	8a 2d       	mov	r24, r10
    1cec:	86 78       	andi	r24, 0x86	; 134
    1cee:	59 f0       	breq	.+22     	; 0x1d06 <vfprintf+0x372>
    1cf0:	a1 fe       	sbrs	r10, 1
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <vfprintf+0x364>
    1cf4:	8b e2       	ldi	r24, 0x2B	; 43
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <vfprintf+0x366>
    1cf8:	80 e2       	ldi	r24, 0x20	; 32
    1cfa:	a7 fc       	sbrc	r10, 7
    1cfc:	8d e2       	ldi	r24, 0x2D	; 45
    1cfe:	b6 01       	movw	r22, r12
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1d06:	89 14       	cp	r8, r9
    1d08:	38 f4       	brcc	.+14     	; 0x1d18 <vfprintf+0x384>
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	80 e3       	ldi	r24, 0x30	; 48
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1d14:	9a 94       	dec	r9
    1d16:	f7 cf       	rjmp	.-18     	; 0x1d06 <vfprintf+0x372>
    1d18:	8a 94       	dec	r8
    1d1a:	f3 01       	movw	r30, r6
    1d1c:	e8 0d       	add	r30, r8
    1d1e:	f1 1d       	adc	r31, r1
    1d20:	80 81       	ld	r24, Z
    1d22:	b6 01       	movw	r22, r12
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1d2a:	81 10       	cpse	r8, r1
    1d2c:	f5 cf       	rjmp	.-22     	; 0x1d18 <vfprintf+0x384>
    1d2e:	22 20       	and	r2, r2
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <vfprintf+0x3a0>
    1d32:	42 ce       	rjmp	.-892    	; 0x19b8 <vfprintf+0x24>
    1d34:	b6 01       	movw	r22, r12
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <fputc>
    1d3e:	2a 94       	dec	r2
    1d40:	f6 cf       	rjmp	.-20     	; 0x1d2e <vfprintf+0x39a>
    1d42:	f6 01       	movw	r30, r12
    1d44:	86 81       	ldd	r24, Z+6	; 0x06
    1d46:	97 81       	ldd	r25, Z+7	; 0x07
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <vfprintf+0x3ba>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	9f ef       	ldi	r25, 0xFF	; 255
    1d4e:	2b 96       	adiw	r28, 0x0b	; 11
    1d50:	e2 e1       	ldi	r30, 0x12	; 18
    1d52:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__epilogue_restores__>

00001d56 <strnlen_P>:
    1d56:	fc 01       	movw	r30, r24
    1d58:	05 90       	lpm	r0, Z+
    1d5a:	61 50       	subi	r22, 0x01	; 1
    1d5c:	70 40       	sbci	r23, 0x00	; 0
    1d5e:	01 10       	cpse	r0, r1
    1d60:	d8 f7       	brcc	.-10     	; 0x1d58 <strnlen_P+0x2>
    1d62:	80 95       	com	r24
    1d64:	90 95       	com	r25
    1d66:	8e 0f       	add	r24, r30
    1d68:	9f 1f       	adc	r25, r31
    1d6a:	08 95       	ret

00001d6c <strnlen>:
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	61 50       	subi	r22, 0x01	; 1
    1d70:	70 40       	sbci	r23, 0x00	; 0
    1d72:	01 90       	ld	r0, Z+
    1d74:	01 10       	cpse	r0, r1
    1d76:	d8 f7       	brcc	.-10     	; 0x1d6e <strnlen+0x2>
    1d78:	80 95       	com	r24
    1d7a:	90 95       	com	r25
    1d7c:	8e 0f       	add	r24, r30
    1d7e:	9f 1f       	adc	r25, r31
    1d80:	08 95       	ret

00001d82 <fputc>:
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	fb 01       	movw	r30, r22
    1d8c:	23 81       	ldd	r18, Z+3	; 0x03
    1d8e:	21 fd       	sbrc	r18, 1
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <fputc+0x16>
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	9f ef       	ldi	r25, 0xFF	; 255
    1d96:	2c c0       	rjmp	.+88     	; 0x1df0 <fputc+0x6e>
    1d98:	22 ff       	sbrs	r18, 2
    1d9a:	16 c0       	rjmp	.+44     	; 0x1dc8 <fputc+0x46>
    1d9c:	46 81       	ldd	r20, Z+6	; 0x06
    1d9e:	57 81       	ldd	r21, Z+7	; 0x07
    1da0:	24 81       	ldd	r18, Z+4	; 0x04
    1da2:	35 81       	ldd	r19, Z+5	; 0x05
    1da4:	42 17       	cp	r20, r18
    1da6:	53 07       	cpc	r21, r19
    1da8:	44 f4       	brge	.+16     	; 0x1dba <fputc+0x38>
    1daa:	a0 81       	ld	r26, Z
    1dac:	b1 81       	ldd	r27, Z+1	; 0x01
    1dae:	9d 01       	movw	r18, r26
    1db0:	2f 5f       	subi	r18, 0xFF	; 255
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	31 83       	std	Z+1, r19	; 0x01
    1db6:	20 83       	st	Z, r18
    1db8:	8c 93       	st	X, r24
    1dba:	26 81       	ldd	r18, Z+6	; 0x06
    1dbc:	37 81       	ldd	r19, Z+7	; 0x07
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	37 83       	std	Z+7, r19	; 0x07
    1dc4:	26 83       	std	Z+6, r18	; 0x06
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <fputc+0x6e>
    1dc8:	8b 01       	movw	r16, r22
    1dca:	ec 01       	movw	r28, r24
    1dcc:	fb 01       	movw	r30, r22
    1dce:	00 84       	ldd	r0, Z+8	; 0x08
    1dd0:	f1 85       	ldd	r31, Z+9	; 0x09
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	09 95       	icall
    1dd6:	89 2b       	or	r24, r25
    1dd8:	e1 f6       	brne	.-72     	; 0x1d92 <fputc+0x10>
    1dda:	d8 01       	movw	r26, r16
    1ddc:	16 96       	adiw	r26, 0x06	; 6
    1dde:	8d 91       	ld	r24, X+
    1de0:	9c 91       	ld	r25, X
    1de2:	17 97       	sbiw	r26, 0x07	; 7
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	17 96       	adiw	r26, 0x07	; 7
    1de8:	9c 93       	st	X, r25
    1dea:	8e 93       	st	-X, r24
    1dec:	16 97       	sbiw	r26, 0x06	; 6
    1dee:	ce 01       	movw	r24, r28
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <__ultoa_invert>:
    1dfa:	fa 01       	movw	r30, r20
    1dfc:	aa 27       	eor	r26, r26
    1dfe:	28 30       	cpi	r18, 0x08	; 8
    1e00:	51 f1       	breq	.+84     	; 0x1e56 <__ultoa_invert+0x5c>
    1e02:	20 31       	cpi	r18, 0x10	; 16
    1e04:	81 f1       	breq	.+96     	; 0x1e66 <__ultoa_invert+0x6c>
    1e06:	e8 94       	clt
    1e08:	6f 93       	push	r22
    1e0a:	6e 7f       	andi	r22, 0xFE	; 254
    1e0c:	6e 5f       	subi	r22, 0xFE	; 254
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	af 4f       	sbci	r26, 0xFF	; 255
    1e16:	b1 e0       	ldi	r27, 0x01	; 1
    1e18:	3e d0       	rcall	.+124    	; 0x1e96 <__ultoa_invert+0x9c>
    1e1a:	b4 e0       	ldi	r27, 0x04	; 4
    1e1c:	3c d0       	rcall	.+120    	; 0x1e96 <__ultoa_invert+0x9c>
    1e1e:	67 0f       	add	r22, r23
    1e20:	78 1f       	adc	r23, r24
    1e22:	89 1f       	adc	r24, r25
    1e24:	9a 1f       	adc	r25, r26
    1e26:	a1 1d       	adc	r26, r1
    1e28:	68 0f       	add	r22, r24
    1e2a:	79 1f       	adc	r23, r25
    1e2c:	8a 1f       	adc	r24, r26
    1e2e:	91 1d       	adc	r25, r1
    1e30:	a1 1d       	adc	r26, r1
    1e32:	6a 0f       	add	r22, r26
    1e34:	71 1d       	adc	r23, r1
    1e36:	81 1d       	adc	r24, r1
    1e38:	91 1d       	adc	r25, r1
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	20 d0       	rcall	.+64     	; 0x1e7e <__ultoa_invert+0x84>
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <__ultoa_invert+0x48>
    1e40:	68 94       	set
    1e42:	3f 91       	pop	r19
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	26 9f       	mul	r18, r22
    1e48:	11 24       	eor	r1, r1
    1e4a:	30 19       	sub	r19, r0
    1e4c:	30 5d       	subi	r19, 0xD0	; 208
    1e4e:	31 93       	st	Z+, r19
    1e50:	de f6       	brtc	.-74     	; 0x1e08 <__ultoa_invert+0xe>
    1e52:	cf 01       	movw	r24, r30
    1e54:	08 95       	ret
    1e56:	46 2f       	mov	r20, r22
    1e58:	47 70       	andi	r20, 0x07	; 7
    1e5a:	40 5d       	subi	r20, 0xD0	; 208
    1e5c:	41 93       	st	Z+, r20
    1e5e:	b3 e0       	ldi	r27, 0x03	; 3
    1e60:	0f d0       	rcall	.+30     	; 0x1e80 <__ultoa_invert+0x86>
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__ultoa_invert+0x5c>
    1e64:	f6 cf       	rjmp	.-20     	; 0x1e52 <__ultoa_invert+0x58>
    1e66:	46 2f       	mov	r20, r22
    1e68:	4f 70       	andi	r20, 0x0F	; 15
    1e6a:	40 5d       	subi	r20, 0xD0	; 208
    1e6c:	4a 33       	cpi	r20, 0x3A	; 58
    1e6e:	18 f0       	brcs	.+6      	; 0x1e76 <__ultoa_invert+0x7c>
    1e70:	49 5d       	subi	r20, 0xD9	; 217
    1e72:	31 fd       	sbrc	r19, 1
    1e74:	40 52       	subi	r20, 0x20	; 32
    1e76:	41 93       	st	Z+, r20
    1e78:	02 d0       	rcall	.+4      	; 0x1e7e <__ultoa_invert+0x84>
    1e7a:	a9 f7       	brne	.-22     	; 0x1e66 <__ultoa_invert+0x6c>
    1e7c:	ea cf       	rjmp	.-44     	; 0x1e52 <__ultoa_invert+0x58>
    1e7e:	b4 e0       	ldi	r27, 0x04	; 4
    1e80:	a6 95       	lsr	r26
    1e82:	97 95       	ror	r25
    1e84:	87 95       	ror	r24
    1e86:	77 95       	ror	r23
    1e88:	67 95       	ror	r22
    1e8a:	ba 95       	dec	r27
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <__ultoa_invert+0x86>
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	61 05       	cpc	r22, r1
    1e92:	71 05       	cpc	r23, r1
    1e94:	08 95       	ret
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	0a 2e       	mov	r0, r26
    1e9c:	06 94       	lsr	r0
    1e9e:	57 95       	ror	r21
    1ea0:	47 95       	ror	r20
    1ea2:	37 95       	ror	r19
    1ea4:	27 95       	ror	r18
    1ea6:	ba 95       	dec	r27
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <__ultoa_invert+0xa2>
    1eaa:	62 0f       	add	r22, r18
    1eac:	73 1f       	adc	r23, r19
    1eae:	84 1f       	adc	r24, r20
    1eb0:	95 1f       	adc	r25, r21
    1eb2:	a0 1d       	adc	r26, r0
    1eb4:	08 95       	ret

00001eb6 <__muluhisi3>:
    1eb6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__umulhisi3>
    1eba:	a5 9f       	mul	r26, r21
    1ebc:	90 0d       	add	r25, r0
    1ebe:	b4 9f       	mul	r27, r20
    1ec0:	90 0d       	add	r25, r0
    1ec2:	a4 9f       	mul	r26, r20
    1ec4:	80 0d       	add	r24, r0
    1ec6:	91 1d       	adc	r25, r1
    1ec8:	11 24       	eor	r1, r1
    1eca:	08 95       	ret

00001ecc <__mulshisi3>:
    1ecc:	b7 ff       	sbrs	r27, 7
    1ece:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__muluhisi3>

00001ed2 <__mulohisi3>:
    1ed2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__muluhisi3>
    1ed6:	82 1b       	sub	r24, r18
    1ed8:	93 0b       	sbc	r25, r19
    1eda:	08 95       	ret

00001edc <__prologue_saves__>:
    1edc:	2f 92       	push	r2
    1ede:	3f 92       	push	r3
    1ee0:	4f 92       	push	r4
    1ee2:	5f 92       	push	r5
    1ee4:	6f 92       	push	r6
    1ee6:	7f 92       	push	r7
    1ee8:	8f 92       	push	r8
    1eea:	9f 92       	push	r9
    1eec:	af 92       	push	r10
    1eee:	bf 92       	push	r11
    1ef0:	cf 92       	push	r12
    1ef2:	df 92       	push	r13
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	ca 1b       	sub	r28, r26
    1f06:	db 0b       	sbc	r29, r27
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	09 94       	ijmp

00001f14 <__epilogue_restores__>:
    1f14:	2a 88       	ldd	r2, Y+18	; 0x12
    1f16:	39 88       	ldd	r3, Y+17	; 0x11
    1f18:	48 88       	ldd	r4, Y+16	; 0x10
    1f1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f20:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f22:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f24:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f26:	b9 84       	ldd	r11, Y+9	; 0x09
    1f28:	c8 84       	ldd	r12, Y+8	; 0x08
    1f2a:	df 80       	ldd	r13, Y+7	; 0x07
    1f2c:	ee 80       	ldd	r14, Y+6	; 0x06
    1f2e:	fd 80       	ldd	r15, Y+5	; 0x05
    1f30:	0c 81       	ldd	r16, Y+4	; 0x04
    1f32:	1b 81       	ldd	r17, Y+3	; 0x03
    1f34:	aa 81       	ldd	r26, Y+2	; 0x02
    1f36:	b9 81       	ldd	r27, Y+1	; 0x01
    1f38:	ce 0f       	add	r28, r30
    1f3a:	d1 1d       	adc	r29, r1
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	ed 01       	movw	r28, r26
    1f48:	08 95       	ret

00001f4a <__umulhisi3>:
    1f4a:	a2 9f       	mul	r26, r18
    1f4c:	b0 01       	movw	r22, r0
    1f4e:	b3 9f       	mul	r27, r19
    1f50:	c0 01       	movw	r24, r0
    1f52:	a3 9f       	mul	r26, r19
    1f54:	70 0d       	add	r23, r0
    1f56:	81 1d       	adc	r24, r1
    1f58:	11 24       	eor	r1, r1
    1f5a:	91 1d       	adc	r25, r1
    1f5c:	b2 9f       	mul	r27, r18
    1f5e:	70 0d       	add	r23, r0
    1f60:	81 1d       	adc	r24, r1
    1f62:	11 24       	eor	r1, r1
    1f64:	91 1d       	adc	r25, r1
    1f66:	08 95       	ret

00001f68 <_exit>:
    1f68:	f8 94       	cli

00001f6a <__stop_program>:
    1f6a:	ff cf       	rjmp	.-2      	; 0x1f6a <__stop_program>
